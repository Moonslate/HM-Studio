#include "frame_script_editor.hpp"

cScriptEditor::cScriptEditor(id i) : wxFrame(nullptr, wxID_ANY, "Script Editor"), romOriginal(i, false), romTranslated(i, true), m_Editor(romOriginal, romTranslated)
{
	CreateGUIControls();
	SetupRom(); 
	ConfigureSTC(tScriptOriginal, romOriginal);
	ConfigureSTC(tScriptTranslated, romOriginal);
	RestoreText();
}

cScriptEditor::~cScriptEditor()
{

}

void cScriptEditor::SetupRom()
{	
	this->SetTitle("ScriptEditor::" + romOriginal.Name);

	wxFileName fn(m_Editor.GetScriptDir());
	fn.AppendDir("Backup");
	fn.SetName("backup");
	fn.SetExt("temp");
	m_BackupFile = fn.GetFullPath().ToStdString();
	
	m_ScriptDic.SetPath(m_Editor.GetScriptDir());
	m_ScriptDic.AppendDir("Dics");	
	m_ScriptDic.SetExt("usr");

	if (!m_ScriptDic.DirExists())
	{
		m_ScriptDic.Mkdir();
	}
}

void cScriptEditor::ConfigureSTC(STC* stc, const RomFile& rom)
{		
	const VarTable& table = rom.GetVarTable();	
	
	for(size_t i = 0; i < table.Size(); ++i)
	{		
		stc->AddVar(std::string(table.GetName(i)));
	}	
	
	int eolMode = rom.GetEOL() == 0x0a ? wxSTC_EOL_LF : wxSTC_EOL_CRLF;

	stc->SetMaxLineLenght(rom.GetLineMax());
	stc->SetEOLMode(eolMode);
	stc->InsertOnCtrlKey(std::string(1, (char)0x05), 'E');
	stc->InsertOnCtrlKey(std::string(1, (char)0x0c) + stc->GetEOL().ToStdString(), 'R');
}

void cScriptEditor::BackupText()
{	
	size_t max = 0;

	for (const std::string& str : m_Editor.GetTranlated())
	{
		max += str.size() + 1;
	}

	size_t size = sizeof(size_t);

	std::string buffer;
	buffer.reserve(max + (size * 2));

	for (const std::string& str : m_Editor.GetTranlated())
	{
		buffer.append(str);
		buffer.push_back('\0');
	}

	size_t number = m_Editor.GetNumber();	
	size_t index = m_Editor.GetIndex();

	if (index > 0)
		index--;

	buffer.append((const char*)&number, size);
	buffer.append((const char*)&index, size);

	File::WriteAllText(m_BackupFile, buffer);
}

void cScriptEditor::RestoreText()
{
	bool good = true;

	if (wxFile::Exists(m_BackupFile))
	{		
		std::string buffer = File::ReadAllText(m_BackupFile);
		size_t size = buffer.size();

		if (size > 8)
		{
			uint32_t* number = (uint32_t*)(buffer.c_str() + size - 8);
			uint32_t* index = (uint32_t*)(buffer.c_str() + size - 4);

			CheckAndGoScript(*number, *index);

			if (m_Editor.GetIndex() != *index)
				return;

			std::vector<std::string> text;
			text.reserve(m_Editor.GetCount());

			size_t cursor = 0;

			for (size_t i = 0; i < m_Editor.GetCount(); ++i)
			{
				if (cursor >= size)
				{
					good = false;
					break;
				}

				text.push_back(std::string(buffer.c_str() + cursor));
				cursor += text[i].size() + 1;
			}

			m_Editor.GetTranlated() = text;
			UpdateText();
		}
		else
		{
			good = false;
		}

		if (!good)
			wxMessageDialog(nullptr, "Corrupted backup file", "Huh?", wxICON_ERROR).ShowModal();
	}
}

void cScriptEditor::OpenScript(size_t index)
{	
	m_Editor.OpenScript(index);	
	UpdateScript();
}

void cScriptEditor::SaveScript()
{		
	m_Editor.SaveScript();

	if (wxFile::Exists(m_BackupFile))
	{
		wxRemoveFile(m_BackupFile);
	}
}

void cScriptEditor::UpdateScriptDic()
{	
	if (m_DicIndex != std::string::npos)
	{
		SpellChecker::RemoveUserDic(m_DicIndex);
		tScriptTranslated->RemoveDicToMenu(m_DicIndex);
	}	

	m_ScriptDic.SetName(std::to_string(m_Editor.GetNumber()));

	m_DicIndex = SpellChecker::AddUserDic(m_ScriptDic.GetFullPath().ToStdString());
	tScriptTranslated->AppendDicToMenu("Script", m_DicIndex);
}

void cScriptEditor::UpdateScript()
{
	this->SetTitle(wxString("ScriptEditor::") << romOriginal.Name << " - " << m_Editor.GetNumber());
		
	UpdateScriptDic();
	UpdateText();
}

//ToDo: Fix this
void cScriptEditor::CheckAllCode()
{
}

void cScriptEditor::FindText()
{
	FrameSearchScript dialog;

	if (!m_Editor.IsOpened())
		dialog.InScript(true);

	if (m_Editor.GetRom(true).Console == console::DS)
	{
		dialog.SetEol("\\n", "\n");
	}
	else
	{
		dialog.SetEol("\\r\\n", "\r\n");
	}

	if (dialog.ShowModal() != wxID_CANCEL)
	{
		std::string search = dialog.GetSearch();
		std::string replace = dialog.GetReplace();
		bool inScript = dialog.InScript();
		bool extended = dialog.Extended();
		bool translated = dialog.Translated();
		bool find = dialog.Find();
		bool useTable = dialog.UseTable();

		if (find)
		{
			if (!inScript)
			{
				m_FindPos = m_Editor.Find(search, useTable, translated);
				m_FindIndex = 0;
				m_Editor.SetIndex(m_FindPos[m_FindIndex]);
			}
			else
			{				
				ShowResultWindow(m_Editor.FindInScripts(search, useTable, translated));
			}
		}
		else
		{
			if (!inScript)
			{
				m_Editor.Replace(search, useTable, replace);
				UpdateText();

				m_FindPos.clear();
				m_FindIndex = 0;
			}
			else
			{
				wxMessageBox("Replace in script is not yet supported in this version.", "Huh?", wxICON_WARNING);
			}
		}
	}
	
	Layout();
}

void cScriptEditor::tScritpTranslatedOnModified(wxStyledTextEvent& event)
{	
	event.Skip();
}

void cScriptEditor::tScriptTranslatedOnUi(wxStyledTextEvent& event)
{		
	CallAfter(&cScriptEditor::UpdateStatusText, tScriptTranslated);

	event.Skip();	
}

void cScriptEditor::OnProxScriptClick(wxCommandEvent& event)
{
	CheckAndGoScript(m_Editor.GetNumber() + 1);

	m_FindIndex = 0;
	m_FindPos.clear();

	event.Skip();
}

void cScriptEditor::OnDumpInsertClick(wxCommandEvent& event)
{
	InsertDumpDialog(m_Editor).ShowModal();
	event.Skip();
}

void cScriptEditor::CheckAndGoScript(size_t number, size_t index)
{
	switch (m_Editor.CheckAndGoScript(number))
	{
	case ScriptFlags::ERROR_NOTEXT:
		wxMessageBox("This script have no text.", "Huh?", wxICON_ERROR);
		break;
	case ScriptFlags::SUCCESS:
		UpdateScript();
		
		if(m_Editor.SetIndex(index))
		{			
			UpdateText();
		}

	default:
		break;
	}
}

void cScriptEditor::GoScript()
{
	wxTextEntryDialog ted(this, "Got to script ", "Enter a number");
	ted.SetTextValidator(wxFILTER_NUMERIC);
	ted.SetMaxLength(4);

	if (ted.ShowModal() == wxID_OK)
	{
		CheckAndGoScript(std::stoi(ted.GetValue().ToStdString()));
	}	
}

void cScriptEditor::PrevText()
{
	if (m_Editor.PrevText())
	{
		UpdateText();
	}
}

void cScriptEditor::ProxText()
{
	if (m_Editor.ProxText())
	{
		UpdateText();
	}
}

void cScriptEditor::HorizontalMode()
{
	if (m_Vertical) SetEditorHorizontal();
	else SetEditorVertical();

	m_Vertical = !m_Vertical;	
}

void cScriptEditor::GetTextFrom()
{
	TextFromScriptDialog dialog(m_Editor);

	if (dialog.ShowModal() == wxOK)
	{
		m_Editor.SetText(dialog.GetText());
		UpdateText();
	}	
}

void cScriptEditor::SaveText()
{
	m_Editor.SaveText(tScriptTranslated->GetText().ToStdString());

	if (tScriptTranslated->GetModify())
	{
		BackupText();
	}

	UpdateText();
}

void cScriptEditor::ShowResultWindow(const FilesResults& results)
{
	if (!m_pFindResultsWindow)
	{
		m_pFindResultsWindow = new FindResultsWindow(this);
		m_pFindResultsWindow->Bind(EVT_FINDRESULT_CLICK, &cScriptEditor::OnResultClick, this);
		global_sizer->Add(m_pFindResultsWindow, 0, wxEXPAND, 0);
	}

	m_pFindResultsWindow->SetFindResults(results);

	m_pMenuBar->Check(ID_SEARCHWINDOW, true);
	m_pFindResultsWindow->Show(true);

	Layout();
	this->Restore();
	this->Raise();
}

void cScriptEditor::InsertScript()
{
	SaveScript();
	
	ScriptFlags flag = m_Editor.Insert(m_Editor.GetScript(), m_Editor.GetNumber());

	std::string message;	

	std::string sucessMessage = "The script was inserted, ";
	bool succes = true;
	long icon = 0;

	switch (flag)
	{		
	case ScriptFlags::INSERT_LESS:
		icon = wxICON_NONE;
		message = sucessMessage + "and now have empty bytes.";
		break;
	case ScriptFlags::INSERT_VERIFY:
		icon = wxICON_INFORMATION;
		message = sucessMessage + "but the old script was missing.";
		break;
	case ScriptFlags::INSERT_LARGER:
		message = sucessMessage + "and empty bytes was used.";
		icon = wxICON_NONE;
		break;
	case ScriptFlags::INSERT_FIND:
		message = sucessMessage + "and needed to be moved to other offset.";
		icon = wxICON_WARNING;
		break;
	case ScriptFlags::INSERT_NONE:
		message = "The script was not inserted. There are no space.";
		icon = wxICON_ERROR;
		succes = false;
		break;
	default:
		break;
	}

	wxMessageBox(message, succes ? "Yeah!!" : "Huh?", icon, this);
}

void cScriptEditor::OnCheckEOLClick(wxCommandEvent& event)
{	
	ShowResultWindow(m_Editor.CheckEOL());
	event.Skip();
}

void cScriptEditor::OnCheckCodeClick(wxCommandEvent& event)
{
	ShowResultWindow(m_Editor.CheckCode());
	event.Skip();
}

void cScriptEditor::OnSetEventClick(wxCommandEvent& event)
{
	wxTextEntryDialog ted(this, "Got to script ", "Enter a number");
	ted.SetTextValidator(wxFILTER_NUMERIC);
	ted.SetMaxLength(4);

	if (ted.ShowModal() == wxID_OK)
	{		
		m_Editor.SetEvent(std::stoi(ted.GetValue().ToStdString()));
	}

	event.Skip();
}

void cScriptEditor::OnSTCLeftDown(wxMouseEvent& event)
{
	event.Skip();
}

void cScriptEditor::OnResultClick(wxCommandEvent& event)
{	
	const SearchResult& result = *(SearchResult*)event.GetClientData();	
	
	size_t number = GetNumberFromResult(result);
	size_t index = GetIndexFromResult(result, event.GetInt());
			
	CheckAndGoScript(number, index);
			
	event.Skip();
}

size_t cScriptEditor::GetNumberFromResult(const SearchResult& result)
{
	return std::stoi(result.GetTitle().substr(result.GetTitle().find("_", 7) + 1).ToStdString());
}

size_t cScriptEditor::GetIndexFromResult(const SearchResult& result, size_t clicked)
{
	return std::stoi(result.GetHits()[clicked].substr(7).ToStdString());
}

void cScriptEditor::SetTextRange()
{
	DialogTextRange dialog(this);
	
	dialog.ShowModal();	
}

void cScriptEditor::UpdateStatusText(wxStyledTextCtrl* stc)
{
	statusBar->SetStatusText(wxString("Size: ") << std::to_string(stc->GetTextLength()), 1);

	statusBar->SetStatusText(wxString("Ln: ") << stc->GetCurrentLine() + 1, 2);

	int selSize = (stc->GetSelectionEnd() - stc->GetSelectionStart());

	if (selSize > 0)
		selSize = stc->GetSelectedText().size();

	statusBar->SetStatusText(wxString("Sel: ") << selSize, 3);

	statusBar->SetStatusText(wxString("Col: ") << tScriptTranslated->GetColumn(tScriptTranslated->GetCurrentPos()), 4);
}

void cScriptEditor::UpdateText()
{	
	tScriptOriginal->SetText(m_Editor.GetCurOriginal());
	tScriptTranslated->SetText(m_Editor.GetCurTranslated());	

	statusBar->SetStatusText(wxString("Index: ") << std::to_string(m_Editor.GetIndex() + 1) << "/" << std::to_string(m_Editor.GetCount()));
		
	tScriptTranslated->SetModified(false);
}

void cScriptEditor::CreateGUIControls()
{
	this->SetBackgroundColour(wxColour(240, 240, 240));

	/******************************
		Menu creation starts
	*******************************/

	wxMenu* menuScript = new wxMenu();
	menuScript->Append(wxID_OPEN, "Get text from...");
	menuScript->Append(ID_SCRSAVE, "Save\tCtrl-Shift-S", "Save the current script");
	menuScript->Append(ID_SCRPREV, "Previous\tCtrl-Shift-Left", "Go to previous script");
	menuScript->Append(ID_SCRPROX, "Previous\tCtrl-Shift-Right", "Go to next script");
	menuScript->Append(ID_SCRINSERT, "Insert\tCtrl-Shift-E", "Insert the current script");
	menuScript->Append(ID_HEXORIG, "Original in HexEditor");
	menuScript->Append(ID_HEXTRANS, "Translated in HexEditor");

	wxMenu* menuString = new wxMenu();
	menuString->Append(ID_STRSAVE, "Save\tCtrl-S", "Save the current string");
	menuString->Append(ID_STRPREV, "Prev\tAlt-Left", "Loads the previous string");
	menuString->Append(ID_STRPROX, "Next\tAlt-Right", "Loads the next string");

	wxMenu* menuEdit = new wxMenu();
	menuEdit->Append(wxID_ANY, "Move To");
	menuEdit->Bind(wxEVT_MENU, &cScriptEditor::OnConvertEOLClick, this, menuEdit->Append(wxNewId(), "Convert EOL")->GetId());

	wxMenu* menuSearch = new wxMenu();
	menuSearch->Append(wxID_FIND, "Find Text\tCtrl-F");
	menuSearch->Append(ID_FINDNEXT, "Find Next\tF3");
	menuSearch->Append(wxID_ANY, "Find Next Script");	

	wxMenu* menuTools = new wxMenu();
	menuTools->Bind(wxEVT_MENU, &cScriptEditor::OnCheckEOLClick, this, menuTools->Append(wxNewId(), "EOL Checker", nullptr, "Checking Tool")->GetId());
	menuTools->Bind(wxEVT_MENU, &cScriptEditor::OnCheckCodeClick, this, menuTools->Append(wxNewId(), "Code Checker", nullptr, "Checking Tool")->GetId());
	menuTools->Bind(wxEVT_MENU, &cScriptEditor::OnDumpInsertClick, this, menuTools->Append(wxNewId(), "Dumper/Inserter", nullptr, "Dumper/Inserter Tool")->GetId());
	menuTools->Bind(wxEVT_MENU, &cScriptEditor::OnSetEventClick, this, menuTools->Append(wxNewId(), "Set event", nullptr, "Set event to trigger this script")->GetId());
	//wxMenu* menuOptions = new wxMenu();	
	
	wxMenu* menuView = new wxMenu();
	menuView->AppendCheckItem(ID_SEARCHWINDOW, "Search Window");
	menuView->AppendCheckItem(wxID_TOP, "Always On Top");
	menuView->Append(ID_HVMODE, "Horizontal Mode");

	m_pMenuBar = new wxMenuBar();
	m_pMenuBar->Append(menuScript, "File");
	m_pMenuBar->Append(menuString, "String");
	m_pMenuBar->Append(menuEdit, "Edit");
	m_pMenuBar->Append(menuSearch, "Search");
	m_pMenuBar->Append(menuTools, "Tools");
	//m_pMenuBar->Append(menuOptions, "Options");
	m_pMenuBar->Append(menuView, "View");

	m_pMenuBar->Bind(wxEVT_MENU, &cScriptEditor::OnMenuClick, this);
	SetMenuBar(m_pMenuBar);

	statusBar = CreateStatusBar(5);
	statusBar->SetStatusText("Ready!", 0);
	statusBar->SetStatusText("Lines: 1", 1);
	statusBar->SetStatusText("Ln: 0", 2);
	statusBar->SetStatusText("Sel: 0", 3);
	statusBar->SetStatusText("Col: 0", 4);

	int widths[5] = { -5, -1, -1, -1, -1 };

	statusBar->SetStatusWidths(statusBar->GetFieldsCount(), widths);

	//--------------------//
	// Menu creation ends //
	//--------------------//	

//-----------------------------------------------------------------//

	CreateMyToolBar();

	wxSize button_min_size = wxSize(40, 26);	

	tScriptTranslated = new STC(this, wxID_ANY);

	tScriptOriginal = new STC(this, wxID_ANY);
	
	tScriptTranslated->Bind(wxEVT_STC_CHANGE, &cScriptEditor::tScritpTranslatedOnModified, this);
	tScriptTranslated->Bind(wxEVT_STC_UPDATEUI, &cScriptEditor::tScriptTranslatedOnUi, this);
	tScriptTranslated->Bind(wxEVT_LEFT_DOWN, &cScriptEditor::OnSTCLeftDown, this);

	editor_save_text = new wxButton(this, ID_STRSAVE, "Save");
	editor_save_text->Bind(wxEVT_BUTTON, &cScriptEditor::OnNavigationClick, this);
	editor_prev_text = new wxButton(this, ID_STRPREV, "<<");
	editor_prev_text->Bind(wxEVT_BUTTON, &cScriptEditor::OnNavigationClick, this);
	editor_prev_text->SetMinSize(button_min_size);
	editor_next_text = new wxButton(this, ID_STRPROX, ">>");
	editor_next_text->Bind(wxEVT_BUTTON, &cScriptEditor::OnNavigationClick, this);
	editor_next_text->SetMinSize(button_min_size);

	editor_buttons_sizer = new wxBoxSizer(wxHORIZONTAL);
	editor_buttons_sizer->Add(editor_save_text, 0, wxALL | wxEXPAND, 0);
	editor_buttons_sizer->AddStretchSpacer(1);
	editor_buttons_sizer->Add(editor_prev_text, 0, wxALL | wxEXPAND, 0);
	editor_buttons_sizer->AddSpacer(4);
	editor_buttons_sizer->Add(editor_next_text, 0, wxALL | wxEXPAND, 0);

	editor_sizer = new wxBoxSizer(wxVERTICAL);	
	editor_sizer->Add(tScriptTranslated, 2, wxALL | wxEXPAND, 0);
	editor_sizer->Add(editor_buttons_sizer, 0, wxUP | wxBOTTOM | wxEXPAND, 4);
	editor_sizer->Add(tScriptOriginal, 2, wxALL | wxEXPAND, 0);

	global_sizer = new wxBoxSizer(wxVERTICAL);	
	global_sizer->Add(editor_sizer, 1, wxALL | wxEXPAND, 0);		

	SetSizer(global_sizer);
	global_sizer->Fit(this);
	global_sizer->SetSizeHints(this);
}

void cScriptEditor::SetEditorVertical()
{	
	if (editor_sizer != nullptr)
		editor_sizer->SetOrientation(wxVERTICAL);

	Layout();

	global_sizer->Fit(this);
	global_sizer->SetSizeHints(this);
}

void cScriptEditor::SetEditorHorizontal()
{
	if (editor_buttons_sizer != nullptr)
	{
		editor_sizer->Detach(1);
		global_sizer->Add(editor_buttons_sizer, 0, wxUP | wxBOTTOM | wxEXPAND, 4);
	}	

	if (editor_sizer != nullptr)
		editor_sizer->SetOrientation(wxHORIZONTAL);

	Layout();

	global_sizer->Fit(this);
	global_sizer->SetSizeHints(this);
}

void cScriptEditor::OpenInHexEditor(int id)
{
	wxString path = m_Editor.GetPath(id == ID_HEXTRANS);	

	wxExecute(wxString("MoonHex -f ") << "\"" << path << "\"");
}

void cScriptEditor::OnMenuClick(wxCommandEvent& event)
{
	int id = event.GetId();	

	if(id == ID_SEARCHWINDOW)
	{
		if(m_pFindResultsWindow != nullptr)
		{
			bool show = !m_pFindResultsWindow->IsShown();
		
			m_pFindResultsWindow->Show(show);
		
			m_pMenuBar->Check(id, show);
			
			Layout();
		}	
	}
	else
	{		
		if (!ScriptMenuTools(id))
		{
			if (!StringMenuTools(id))
			{
				OthersMenuTools(id);
			}
		}	
	}

	event.Skip();
}

void cScriptEditor::OnNavigationClick(wxCommandEvent& event)
{	
	StringMenuTools(event.GetId());

	event.Skip();
}

void cScriptEditor::OnToolBarClick(wxCommandEvent& event)
{	
	ScriptMenuTools(event.GetId());

	event.Skip();
}

void cScriptEditor::OnConvertEOLClick(wxCommandEvent& event)
{	
	for (std::string& text : m_Editor.GetTranlated())
		Moon::String::ConvertLineEnds(text, 0x0d0a);

	event.Skip();
}

bool cScriptEditor::ScriptMenuTools(int id)
{
	switch (id)
	{
	case wxID_OPEN:
		GetTextFrom();
		break;
	case ID_SCRPREV:
		CheckAndGoScript(m_Editor.GetNumber() - 1);		
		break;
	case ID_SCRPROX:
		CheckAndGoScript(m_Editor.GetNumber() + 1);		
		break;
	case ID_SCRGO:
		GoScript();		
		break;
	case ID_SCRSAVE:
		SaveScript();		
		break;
	case ID_SCRINSERT:
		InsertScript();
		break;
	case ID_SCRCODE:
		CheckAllCode();
		break;
	case ID_HEXORIG:
		OpenInHexEditor(id);
		break;
	case ID_HEXTRANS:
		OpenInHexEditor(id);
		break;
	default:
		return false;
		break;
	}

	return true;
}

bool cScriptEditor::StringMenuTools(int id)
{
	switch (id)
	{
	case ID_STRSAVE:
		SaveText();
		break;
	case ID_STRPREV:
		PrevText();
		break;
	case ID_STRPROX:
		ProxText();
		break;
	case ID_STRRESTORE:
		RestoreText();
		break;
	default:
		return false;
		break;
	}

	return true;
}

bool cScriptEditor::OthersMenuTools(int id)
{
	switch (id)
	{
	case wxID_FIND:
		FindText();
		break;
	case ID_FINDNEXT:
		if (!m_FindPos.empty())
		{
			++m_FindIndex;

			if (m_FindIndex == m_FindPos.size())
			{				
				m_FindIndex = 0;
			}

			if (m_Editor.SetIndex(m_FindPos[m_FindIndex]))
			{
				UpdateText();
			}			
		}
		break;
	case ID_TEXTRANGE:
		SetTextRange();
		break;	
	case wxID_TOP:
		m_pMenuBar->Check(wxID_TOP, this->ToggleWindowStyle(wxSTAY_ON_TOP));
		break;
	case ID_HVMODE:
		HorizontalMode();
		break;
	default:
		return false;
		break;
	}

	return true;
}

void cScriptEditor::CreateMyToolBar()
{

	uint8_t* prevScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x89, 0xbc, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0xe0, 0xee, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xbe, 0xda, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x4f, 0x9f, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x88, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x34, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf2, 0xf8, 0xfb, 0xf5, 0xfa, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x77, 0xb2, 0x1c, 0x85, 0xba, 0x22, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0xf9, 0xfc, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xf5, 0xfa, 0xfc, 0xfd, 0xfe, 0xfe, 0x36, 0x8e, 0xb9, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xe4, 0xef, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xf6, 0xfa, 0xfd, 0xc8, 0xe2, 0xee, 0x55, 0x9d, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xc3, 0xda, 0x59, 0x99, 0x46, 0x76, 0xa0, 0x00, 0x30, 0x7b, 0x00, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdc, 0xee, 0xf5, 0xfa, 0xfc, 0xfe, 0xa3, 0xcf, 0xe4, 0x77, 0xaf, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xa5, 0x46, 0x7e, 0xa9, 0x00, 0xd4, 0xe1, 0x71, 0x38, 0x80, 0x00, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf3, 0xd6, 0xea, 0xf3, 0xd5, 0xea, 0xf3, 0xff, 0xff, 0xff, 0x79, 0xb8, 0xd6, 0x9b, 0xc1, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xb3, 0x59, 0x7f, 0xae, 0x00, 0xc4, 0xda, 0x58, 0xd5, 0xe4, 0x80, 0x37, 0x7f, 0x00, 0x37, 0x7f, 0x00, 0x36, 0x7e, 0x00, 0x34, 0x7d, 0x00, 0x74, 0xa8, 0x47, 0xce, 0xe7, 0xf0, 0xff, 0xff, 0xff, 0x4b, 0x9f, 0xc9, 0xc2, 0xd8, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xb1, 0x53, 0x81, 0xb2, 0x00, 0xc7, 0xe0, 0x60, 0x97, 0xc3, 0x00, 0xd8, 0xe8, 0x93, 0xd1, 0xe6, 0x4d, 0xd2, 0xe7, 0x4e, 0xd2, 0xe7, 0x4a, 0xdf, 0xec, 0x90, 0x39, 0x7f, 0x00, 0xca, 0xe3, 0xee, 0xff, 0xff, 0xff, 0x31, 0x90, 0xc1, 0xf5, 0xf5, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x8a, 0x00, 0xcd, 0xe6, 0x63, 0x9a, 0xca, 0x00, 0x98, 0xc8, 0x00, 0x97, 0xc7, 0x00, 0x99, 0xc8, 0x00, 0x99, 0xc8, 0x00, 0x99, 0xc8, 0x00, 0xcf, 0xe7, 0x6b, 0x3c, 0x81, 0x00, 0xd2, 0xe9, 0xf0, 0xfd, 0xfe, 0xff, 0x0a, 0x7c, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x9f, 0x42, 0x81, 0xb9, 0x00, 0x9f, 0xd3, 0x00, 0x9c, 0xd0, 0x00, 0x9c, 0xd0, 0x00, 0x9f, 0xd5, 0x00, 0xa1, 0xd7, 0x00, 0xa1, 0xd7, 0x00, 0xc0, 0xe7, 0x3a, 0x3c, 0x81, 0x00, 0xdc, 0xee, 0xf4, 0xe2, 0xf0, 0xf6, 0x25, 0x87, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xdd, 0xdd, 0x75, 0xa0, 0x46, 0x80, 0xbc, 0x00, 0xa0, 0xd8, 0x00, 0xa2, 0xd9, 0x00, 0x43, 0x84, 0x00, 0x4a, 0x88, 0x00, 0x4b, 0x89, 0x00, 0x4a, 0x88, 0x00, 0x80, 0xae, 0x4c, 0xea, 0xf4, 0xf8, 0x61, 0xab, 0xcf, 0x71, 0xa9, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xde, 0xde, 0x75, 0xa0, 0x46, 0x80, 0xbe, 0x00, 0xa6, 0xe4, 0x00, 0x4b, 0x89, 0x00, 0x14, 0x84, 0xdd, 0x18, 0x85, 0xd0, 0x17, 0x84, 0xcb, 0x14, 0x82, 0xc4, 0x12, 0x80, 0xb7, 0x26, 0x88, 0xba, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xde, 0xde, 0x72, 0x9e, 0x42, 0x85, 0xc6, 0x00, 0x4f, 0x8b, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xd0, 0xd0, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* prevScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* proxScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x89, 0xbc, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0xe0, 0xee, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xbe, 0xda, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x4f, 0x9f, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x88, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x34, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf2, 0xf8, 0xfb, 0xf5, 0xfa, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x77, 0xb2, 0x1c, 0x85, 0xba, 0x22, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0xf9, 0xfc, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xf5, 0xfa, 0xfc, 0xfd, 0xfe, 0xfe, 0x36, 0x8e, 0xb9, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xe4, 0xef, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xf6, 0xfa, 0xfd, 0xc8, 0xe2, 0xee, 0x55, 0x9d, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xc3, 0xda, 0xbb, 0xdb, 0xea, 0xee, 0xf7, 0xfa, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0x30, 0x7b, 0x00, 0x76, 0xa0, 0x00, 0x59, 0x99, 0x46, 0x77, 0xaf, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0xac, 0xcb, 0xcc, 0xe4, 0xf0, 0xe0, 0xef, 0xf6, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf3, 0xd6, 0xea, 0xf3, 0x38, 0x80, 0x00, 0xd4, 0xe1, 0x71, 0x7e, 0xa9, 0x00, 0x74, 0xa5, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x91, 0xbe, 0xff, 0xff, 0xff, 0xd2, 0xe9, 0xf1, 0xd1, 0xe8, 0xf0, 0x74, 0xa8, 0x47, 0x34, 0x7d, 0x00, 0x36, 0x7e, 0x00, 0x37, 0x7f, 0x00, 0x37, 0x7f, 0x00, 0xd5, 0xe4, 0x80, 0xc4, 0xda, 0x58, 0x7f, 0xae, 0x00, 0x87, 0xb3, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x8b, 0xbc, 0xff, 0xff, 0xff, 0xd3, 0xe8, 0xf1, 0xd2, 0xe8, 0xf1, 0x39, 0x7f, 0x00, 0xdf, 0xec, 0x90, 0xd2, 0xe7, 0x4a, 0xd2, 0xe7, 0x4e, 0xd1, 0xe6, 0x4d, 0xd8, 0xe8, 0x93, 0x97, 0xc3, 0x00, 0xc7, 0xe0, 0x60, 0x81, 0xb2, 0x00, 0x84, 0xb1, 0x53, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0f, 0x7f, 0xb6, 0x2e, 0x90, 0xc0, 0x29, 0x8e, 0xbf, 0x29, 0x8d, 0xbf, 0x3c, 0x81, 0x00, 0xcf, 0xe7, 0x6b, 0x99, 0xc8, 0x00, 0x99, 0xc8, 0x00, 0x99, 0xc8, 0x00, 0x97, 0xc7, 0x00, 0x98, 0xc8, 0x00, 0x9a, 0xca, 0x00, 0xcd, 0xe6, 0x63, 0x47, 0x8a, 0x00, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x81, 0x00, 0xc0, 0xe7, 0x3a, 0xa1, 0xd7, 0x00, 0xa1, 0xd7, 0x00, 0x9f, 0xd5, 0x00, 0x9c, 0xd0, 0x00, 0x9c, 0xd0, 0x00, 0x9f, 0xd3, 0x00, 0x81, 0xb9, 0x00, 0x74, 0x9f, 0x42, 0x45, 0x96, 0xbd, 0x89, 0xc1, 0xdc, 0xe0, 0xf0, 0xf5, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0x80, 0xae, 0x4c, 0x4a, 0x88, 0x00, 0x4b, 0x89, 0x00, 0x4a, 0x88, 0x00, 0x43, 0x84, 0x00, 0xa2, 0xd9, 0x00, 0xa0, 0xd8, 0x00, 0x80, 0xbc, 0x00, 0x75, 0xa0, 0x46, 0xdd, 0xdd, 0xdd, 0xbf, 0xcd, 0xd5, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x14, 0x82, 0xc4, 0x17, 0x84, 0xcb, 0x18, 0x85, 0xd0, 0x14, 0x84, 0xdd, 0x4b, 0x89, 0x00, 0xa6, 0xe4, 0x00, 0x80, 0xbe, 0x00, 0x75, 0xa0, 0x46, 0xde, 0xde, 0xde, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x4f, 0x8b, 0x00, 0x85, 0xc6, 0x00, 0x72, 0x9e, 0x42, 0xde, 0xde, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xdd, 0xdd, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* proxScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 };

	uint8_t* goScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x89, 0xbc, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0xe0, 0xee, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xbe, 0xda, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x4f, 0x9f, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x88, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x34, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf2, 0xf8, 0xfb, 0xf5, 0xfa, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x77, 0xb2, 0x1c, 0x85, 0xba, 0x22, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0xf9, 0xfc, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xf5, 0xfa, 0xfc, 0xfd, 0xfe, 0xfe, 0x36, 0x8e, 0xb9, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xe4, 0xef, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0x00, 0x00, 0x80, 0xc8, 0xe2, 0xee, 0x55, 0x9d, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xc3, 0xda, 0xbb, 0xdb, 0xea, 0xee, 0xf7, 0xfa, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdc, 0xee, 0xf5, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x77, 0xaf, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0xac, 0xcb, 0xcc, 0xe4, 0xf0, 0xe0, 0xef, 0xf6, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf3, 0xd6, 0xea, 0xf3, 0xd5, 0xea, 0xf3, 0x00, 0x00, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x8b, 0xbc, 0xff, 0xff, 0xff, 0xd3, 0xe8, 0xf1, 0xd2, 0xe8, 0xf1, 0xd3, 0xe8, 0xf1, 0xd3, 0xe8, 0xf1, 0xd2, 0xe8, 0xf1, 0xcf, 0xe6, 0xf0, 0xca, 0xe3, 0xee, 0x00, 0x00, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0f, 0x7f, 0xb6, 0x2e, 0x90, 0xc0, 0x29, 0x8e, 0xbf, 0x29, 0x8d, 0xbf, 0x29, 0x8e, 0xbf, 0x2b, 0x8e, 0xbf, 0x2d, 0x8f, 0xc0, 0x7c, 0xba, 0xd7, 0xd2, 0xe9, 0xf0, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0xd9, 0xe9, 0x1d, 0x86, 0xbb, 0xdc, 0xee, 0xf4, 0x00, 0x00, 0x80, 0x25, 0x87, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x96, 0xbd, 0x89, 0xc1, 0xdc, 0xe0, 0xf0, 0xf5, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdd, 0xef, 0xf5, 0xe3, 0xf2, 0xf7, 0x99, 0xca, 0xdf, 0xea, 0xf4, 0xf8, 0x61, 0xab, 0xcf, 0x71, 0xa9, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xcd, 0xd5, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0d, 0x7d, 0xb6, 0x0f, 0x7e, 0xb6, 0x11, 0x7f, 0xb7, 0x12, 0x80, 0xb7, 0x26, 0x88, 0xba, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xd0, 0xd0, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* goScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

	uint8_t* saveScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7e, 0xb5, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0x1d, 0x83, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 0xb6, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x14, 0x7e, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x7a, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x35, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf4, 0xfa, 0xfc, 0xf3, 0xf9, 0xfb, 0xf4, 0xfa, 0xfc, 0xf4, 0xfa, 0xfc, 0xf4, 0xfa, 0xfc, 0xf5, 0xfa, 0xfc, 0xf8, 0xfb, 0xfd, 0xff, 0xff, 0xff, 0x02, 0x77, 0xb2, 0x1d, 0x86, 0xba, 0x24, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7f, 0xbf, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xef, 0xf8, 0xfb, 0xf5, 0xfb, 0xfc, 0xfb, 0xfe, 0xfe, 0xfd, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0x72, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7a, 0xb0, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xf0, 0xf7, 0xfb, 0x57, 0xa5, 0xcb, 0x00, 0x72, 0xae, 0x00, 0x72, 0xae, 0x00, 0x71, 0xae, 0x00, 0x71, 0xae, 0x00, 0x71, 0xaf, 0x00, 0x74, 0xb0, 0x09, 0x7b, 0xb3, 0x13, 0x80, 0xb6, 0x1b, 0x85, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x79, 0xac, 0xbb, 0xdb, 0xea, 0xf1, 0xf8, 0xfa, 0xed, 0xf7, 0xfa, 0x00, 0x73, 0xaf, 0xc6, 0xe8, 0xfd, 0xc1, 0xe4, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xe6, 0xfc, 0xce, 0xec, 0xff, 0x14, 0x81, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x76, 0xa9, 0xcc, 0xe4, 0xf0, 0xe3, 0xf0, 0xf6, 0xe7, 0xf3, 0xf7, 0x00, 0x75, 0xb0, 0xce, 0xe9, 0xfa, 0x02, 0x88, 0xda, 0xec, 0xee, 0xf0, 0xa7, 0xad, 0xb2, 0xa7, 0xad, 0xb2, 0xec, 0xee, 0xf0, 0x02, 0x88, 0xda, 0xd1, 0xea, 0xfb, 0x12, 0x7f, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x79, 0xb0, 0xff, 0xff, 0xff, 0xd5, 0xea, 0xf2, 0xe0, 0xf0, 0xf5, 0x01, 0x76, 0xb0, 0xb9, 0xe0, 0xf7, 0x19, 0x94, 0xdd, 0xe9, 0xe9, 0xee, 0xde, 0xe6, 0xef, 0xde, 0xe6, 0xef, 0xe9, 0xe9, 0xee, 0x19, 0x94, 0xdd, 0xbc, 0xe2, 0xf8, 0x12, 0x80, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x83, 0xb7, 0xff, 0xff, 0xff, 0xd5, 0xe9, 0xf1, 0xe0, 0xef, 0xf4, 0x04, 0x78, 0xb1, 0xaa, 0xd8, 0xf5, 0x2f, 0x9e, 0xe1, 0xa1, 0xca, 0xe7, 0xe0, 0xe2, 0xeb, 0xe0, 0xe2, 0xeb, 0xa1, 0xca, 0xe7, 0x2f, 0x9e, 0xe1, 0xad, 0xd9, 0xf6, 0x14, 0x80, 0xb6, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0f, 0x7f, 0xb6, 0x2e, 0x90, 0xc0, 0x2b, 0x8f, 0xbf, 0x34, 0x93, 0xc2, 0x07, 0x79, 0xb2, 0x9d, 0xd3, 0xf4, 0x41, 0xa6, 0xe4, 0x3a, 0xa4, 0xe3, 0x33, 0xa1, 0xe3, 0x32, 0xa1, 0xe2, 0x3a, 0xa4, 0xe3, 0x41, 0xa6, 0xe3, 0x9e, 0xd4, 0xf4, 0x14, 0x81, 0xb6, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x78, 0xb1, 0x91, 0xcd, 0xf2, 0x4f, 0xad, 0xe6, 0xa9, 0xcf, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xa7, 0xce, 0xe8, 0x4e, 0xad, 0xe6, 0x93, 0xce, 0xf3, 0x15, 0x81, 0xb6, 0x14, 0x7a, 0xab, 0x89, 0xc1, 0xdc, 0xe0, 0xf0, 0xf5, 0xdb, 0xed, 0xf4, 0xdd, 0xee, 0xf5, 0xe6, 0xf4, 0xf7, 0x08, 0x7a, 0xb2, 0x89, 0xca, 0xf3, 0x5c, 0xb6, 0xeb, 0xed, 0xed, 0xf2, 0x78, 0x79, 0x7f, 0xe2, 0xe9, 0xf1, 0xe9, 0xe9, 0xee, 0x5b, 0xb5, 0xea, 0x8b, 0xcc, 0xf3, 0x16, 0x81, 0xb6, 0x0f, 0x43, 0x61, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7d, 0xb5, 0x0d, 0x7d, 0xb6, 0x10, 0x7f, 0xb6, 0x13, 0x80, 0xb6, 0x8b, 0xcc, 0xf6, 0x75, 0xc2, 0xf3, 0xff, 0xfc, 0xf9, 0x91, 0x8d, 0x8b, 0xf9, 0xf9, 0xf9, 0xfc, 0xf8, 0xf4, 0x74, 0xc1, 0xf2, 0x8b, 0xcd, 0xf6, 0x18, 0x82, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x79, 0xa8, 0x18, 0x82, 0xb7, 0x14, 0x81, 0xb6, 0x10, 0x80, 0xb8, 0x0f, 0x81, 0xb9, 0x0e, 0x7f, 0xb8, 0x0f, 0x7e, 0xb6, 0x13, 0x80, 0xb6, 0x18, 0x82, 0xb7, 0x1c, 0x82, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* saveScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x23, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc6, 0x33, 0x33, 0x00, 0x00, 0x34, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x00, 0x00, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x44, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x33, 0x33, 0x33, 0x33, 0x33, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x30 };

	uint8_t* insertScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7e, 0xb5, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0x1d, 0x83, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 0xb6, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x14, 0x7e, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x7a, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x99, 0xc7, 0xc0, 0xdf, 0xed, 0x32, 0x92, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfc, 0xf2, 0xf9, 0xfd, 0xf5, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x77, 0xb6, 0x0e, 0x84, 0xc2, 0x10, 0x87, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7f, 0xbf, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf6, 0xfb, 0xeb, 0xf8, 0xff, 0xeb, 0xfb, 0xff, 0xf4, 0xff, 0xff, 0xf5, 0xff, 0xff, 0x00, 0x70, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7a, 0xb0, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf3, 0xfc, 0xe2, 0xe3, 0xde, 0xd8, 0x8e, 0x37, 0xd8, 0x8f, 0x3c, 0xdc, 0x92, 0x3f, 0xe2, 0x98, 0x45, 0xe1, 0x9d, 0x4d, 0xdf, 0x9e, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x79, 0xac, 0xbb, 0xdb, 0xea, 0xee, 0xf7, 0xfa, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xef, 0xf6, 0xdd, 0xf2, 0xfd, 0xdb, 0xcf, 0xb9, 0xdd, 0x9e, 0x39, 0xf9, 0xe8, 0x8f, 0xf9, 0xe8, 0x92, 0xfb, 0xe9, 0x97, 0xd8, 0x98, 0x4c, 0x9f, 0x72, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x76, 0xa9, 0xcc, 0xe4, 0xf0, 0xe0, 0xef, 0xf6, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xeb, 0xf4, 0xd6, 0xef, 0xfe, 0xd5, 0xb8, 0x8f, 0xe6, 0xb5, 0x55, 0xfe, 0xf9, 0xd9, 0xf4, 0xd3, 0x4d, 0xe5, 0xb5, 0x4b, 0xd4, 0x95, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x79, 0xb0, 0xff, 0xff, 0xff, 0xd2, 0xe9, 0xf1, 0xd1, 0xe8, 0xf0, 0xd1, 0xe8, 0xf1, 0xd1, 0xe9, 0xf3, 0xcf, 0xee, 0xfe, 0xd2, 0xa3, 0x64, 0xf2, 0xd4, 0x88, 0xf8, 0xe0, 0x7c, 0xef, 0xcc, 0x58, 0xd5, 0x95, 0x45, 0x8c, 0x63, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x83, 0xb7, 0xff, 0xff, 0xff, 0xd3, 0xe8, 0xf1, 0xd2, 0xe8, 0xf1, 0xd3, 0xe8, 0xf1, 0xd3, 0xe9, 0xf3, 0xd0, 0xee, 0xff, 0xd8, 0x89, 0x2c, 0xff, 0xec, 0x8b, 0xf9, 0xe1, 0x6c, 0xe8, 0xc0, 0x5c, 0xd0, 0x8c, 0x3f, 0xd3, 0x92, 0x43, 0xd5, 0x95, 0x45, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0f, 0x7f, 0xb6, 0x2e, 0x90, 0xc0, 0x29, 0x8e, 0xbf, 0x29, 0x8d, 0xbf, 0x29, 0x8e, 0xbf, 0x2a, 0x8f, 0xc1, 0x29, 0x94, 0xcc, 0xe0, 0x8c, 0x25, 0xdf, 0xa1, 0x40, 0xe1, 0xaf, 0x50, 0xfd, 0xe9, 0x7d, 0xff, 0xef, 0x81, 0xe3, 0xb4, 0x57, 0xc1, 0x86, 0x39, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb5, 0xdb, 0xef, 0x17, 0x8d, 0xd0, 0xc9, 0xb9, 0x9c, 0xf2, 0xcf, 0x6d, 0xfd, 0xea, 0x87, 0xd6, 0x9d, 0x45, 0xad, 0x76, 0x30, 0x00, 0x00, 0x00, 0x14, 0x7a, 0xab, 0x89, 0xc1, 0xdc, 0xe0, 0xf0, 0xf5, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdd, 0xef, 0xf5, 0xe0, 0xf2, 0xfc, 0x8f, 0xc6, 0xe3, 0xd6, 0xa4, 0x4a, 0xff, 0xf4, 0x95, 0xd7, 0x9d, 0x46, 0x96, 0x66, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x43, 0x61, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb7, 0x05, 0x7e, 0xbe, 0x6d, 0x85, 0x75, 0xdc, 0x9a, 0x39, 0xd5, 0x99, 0x3f, 0x50, 0x34, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 0x8c, 0x20, 0xcd, 0x8a, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* insertScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x23, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc6, 0x33, 0x33, 0x00, 0x00, 0x34, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7d, 0x00, 0x00, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x12, 0x00, 0x00, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x69, 0x00, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x23, 0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7a, 0x1a, 0x00, 0x44, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x49, 0x12, 0x00, 0x00, 0x07, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xff, 0xee, 0x33, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00 };

	uint8_t* testCodeRgb = new uint8_t[768]{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7e, 0xb5, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0x1d, 0x83, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 0xb6, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x14, 0x7e, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x7a, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x34, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf2, 0xf8, 0xfb, 0xf5, 0xfa, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x77, 0xb2, 0x1c, 0x85, 0xba, 0x22, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7f, 0xbf, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xf5, 0xfa, 0xfc, 0xfd, 0xfe, 0xfe, 0x08, 0x74, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7a, 0xb0, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf2, 0xf8, 0xe4, 0xf3, 0xf9, 0xe4, 0xf3, 0xf9, 0xe4, 0xf2, 0xf8, 0xe4, 0xf2, 0xf8, 0xf6, 0xfc, 0xff, 0xc8, 0xe4, 0xf0, 0x0b, 0x74, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x79, 0xac, 0xbb, 0xdb, 0xea, 0xee, 0xf7, 0xfa, 0xdd, 0xf0, 0xf7, 0xdd, 0xf4, 0xfb, 0xdd, 0xfb, 0xff, 0xdd, 0xfa, 0xff, 0xdd, 0xf4, 0xfb, 0xdd, 0xf4, 0xfb, 0xf9, 0xff, 0xff, 0x9e, 0xd9, 0xef, 0x0a, 0x74, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x76, 0xa9, 0xcc, 0xe4, 0xf0, 0xe0, 0xf0, 0xf7, 0xd5, 0xf0, 0xf9, 0xd4, 0xfc, 0xff, 0xd1, 0x18, 0x17, 0xd2, 0x17, 0x16, 0xd6, 0xf9, 0xff, 0xd6, 0xf9, 0xff, 0xd5, 0x18, 0x17, 0xe1, 0x21, 0x1d, 0x00, 0x74, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x79, 0xb0, 0xff, 0xff, 0xff, 0xcf, 0xef, 0xf8, 0xcc, 0xf9, 0xff, 0xd0, 0x19, 0x1b, 0xff, 0xcd, 0xb9, 0xd3, 0x1f, 0x1f, 0xcf, 0xfa, 0xff, 0xce, 0xf9, 0xff, 0xd3, 0x1f, 0x1f, 0xff, 0xd1, 0xbc, 0xde, 0x2a, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x84, 0xb8, 0xff, 0xff, 0xff, 0xc8, 0xf6, 0xff, 0xd0, 0x1a, 0x1c, 0xff, 0xb2, 0x9b, 0xff, 0x64, 0x39, 0xda, 0x20, 0x1e, 0xce, 0xf5, 0xff, 0xc9, 0xf3, 0xfe, 0xd2, 0x1b, 0x1c, 0xff, 0x63, 0x39, 0xff, 0xb8, 0xa1, 0xd2, 0x30, 0x32, 0x00, 0x00, 0x00, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0e, 0x81, 0xb8, 0x27, 0x99, 0xcc, 0xd8, 0x1c, 0x1b, 0xff, 0x9a, 0x7f, 0xff, 0x6d, 0x48, 0xd6, 0x28, 0x2a, 0x24, 0xa5, 0xd9, 0x7b, 0xc2, 0xe0, 0xcf, 0xef, 0xf8, 0xea, 0xff, 0xff, 0xce, 0x24, 0x28, 0xfe, 0x6e, 0x49, 0xff, 0xa2, 0x88, 0xd1, 0x35, 0x37, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x1c, 0x1b, 0xff, 0x86, 0x67, 0xff, 0x77, 0x54, 0xd4, 0x28, 0x2a, 0xb0, 0xef, 0xff, 0x1b, 0x8e, 0xc3, 0xd6, 0xf3, 0xfb, 0xc8, 0xfc, 0xff, 0xce, 0x25, 0x28, 0xff, 0x78, 0x56, 0xff, 0x8e, 0x6f, 0xd1, 0x36, 0x38, 0x14, 0x7a, 0xab, 0x89, 0xc1, 0xdc, 0xe0, 0xf1, 0xf7, 0xdb, 0xf4, 0xfb, 0xd8, 0xff, 0xff, 0xdd, 0x25, 0x23, 0xff, 0x81, 0x5e, 0xff, 0x80, 0x5e, 0xdf, 0x23, 0x21, 0x92, 0xd5, 0xee, 0xdd, 0xfd, 0xff, 0xd9, 0x20, 0x1f, 0xff, 0x80, 0x5e, 0xff, 0x84, 0x63, 0xcf, 0x33, 0x36, 0x00, 0x00, 0x00, 0x0f, 0x43, 0x61, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7f, 0xb7, 0x0a, 0x84, 0xbd, 0x00, 0x8e, 0xcc, 0xdd, 0x2d, 0x2c, 0xff, 0x8e, 0x6c, 0xe1, 0x2c, 0x29, 0x00, 0x8a, 0xc7, 0x00, 0x89, 0xc6, 0xe0, 0x2b, 0x28, 0xff, 0x8f, 0x6e, 0xcf, 0x34, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x35, 0x35, 0xe5, 0x31, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x31, 0x2c, 0xd5, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* testCodeAlpha = new uint8_t[256]{ 0x00, 0x00, 0x00, 0x00, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x23, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x33, 0x33, 0x00, 0x00, 0x34, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb2, 0x00, 0x00, 0x00, 0x00, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x90, 0x00, 0x00, 0x00, 0x00, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 0x44, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 0x00, 0x07, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xff, 0xff, 0x33, 0x33, 0xff, 0xff, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0x00, 0x00, 0x33, 0x33, 0x00, 0x00, 0x00 };				

	this->CreateToolBar(wxTB_DEFAULT_STYLE, wxID_ANY);
	this->GetToolBar()->SetMargins(2, 2);

	m_pToolBar = this->GetToolBar();
	m_pToolBar->AddTool(ID_SCRPREV, "Previous script", wxImage(16, 16, prevScriptRgb, prevScriptAlpha, false), "Previous script");
	m_pToolBar->AddTool(ID_SCRPROX, "Following script", wxImage(16, 16, proxScriptRgb, proxScriptAlpha, false), "Following script");
	m_pToolBar->AddTool(ID_SCRGO, "Got to script", wxImage(16, 16, goScriptRgb, goScriptAlpha, false), "Go to script");
	m_pToolBar->AddTool(ID_SCRSAVE, "Save the script", wxImage(16, 16, saveScriptRgb, saveScriptAlpha, false), "Save the script");
	m_pToolBar->AddTool(ID_SCRINSERT, "Insert script", wxImage(16, 16, insertScriptRgb, insertScriptAlpha, false), "Insert script");
	m_pToolBar->AddTool(ID_SCRCODE, "Test all script code", wxImage(16, 16, testCodeRgb, testCodeAlpha, false), "Test all script code");	

	m_pToolBar->Realize();
	
	m_pToolBar->Bind(wxEVT_TOOL, &cScriptEditor::OnToolBarClick, this);
}

void cScriptEditor::ScriptTextRange(size_t from, size_t to, size_t script)
{

}

DialogTextRange::DialogTextRange(cScriptEditor* parent) : wxDialog(nullptr, wxID_ANY, "Select range"), m_pParent(parent)
{
	CreateGUIControls();
}

void DialogTextRange::CreateGUIControls()
{
	wxStaticText* dialogLabelFrom = new wxStaticText(this, wxID_ANY, "From:  ");
	dialogInputFrom = new wxTextCtrl(this, wxID_ANY);

	wxBoxSizer* dialogFromSizer = new wxBoxSizer(wxHORIZONTAL);
	dialogFromSizer->AddSpacer(4);
	dialogFromSizer->Add(dialogLabelFrom, 0, wxEXPAND, 0);
	dialogFromSizer->AddSpacer(4);
	dialogFromSizer->Add(dialogInputFrom, 0, wxEXPAND, 0);

	wxStaticText* dialogLabelTo = new wxStaticText(this, wxID_ANY, "To: ");
	dialogInputTo = new wxTextCtrl(this, wxID_ANY);

	wxBoxSizer* dialogToSizer = new wxBoxSizer(wxHORIZONTAL);
	dialogFromSizer->AddSpacer(4);
	dialogFromSizer->Add(dialogLabelTo, 0, wxEXPAND, 0);
	dialogFromSizer->AddSpacer(4);
	dialogFromSizer->Add(dialogInputTo, 0, wxEXPAND, 0);
	
	wxStaticText* dialogLabelScript = new wxStaticText(this, wxID_ANY, "Script:");
	dialogInputScript = new wxTextCtrl(this, wxID_ANY);
	dialogGoButton = new wxButton(this, wxID_ANY, "Go!");
	dialogGoButton->Bind(wxEVT_BUTTON, &DialogTextRange::OnGoButton, this);
	
	wxBoxSizer*   dialogScriptSizer = new wxBoxSizer(wxHORIZONTAL);
	dialogScriptSizer->AddSpacer(4);
	dialogScriptSizer->Add(dialogLabelScript, 0, wxEXPAND, 0);
	dialogScriptSizer->AddSpacer(4);
	dialogScriptSizer->Add(dialogInputScript, 0, wxEXPAND, 0);
	dialogScriptSizer->AddStretchSpacer(1);
	dialogScriptSizer->Add(dialogGoButton, 0, wxEXPAND, 0);

	wxBoxSizer* dialogRootSizer = new wxBoxSizer(wxVERTICAL);
	dialogRootSizer->AddSpacer(4);
	dialogRootSizer->Add(dialogFromSizer, 0, wxEXPAND, 0);
	dialogRootSizer->AddSpacer(4);
	dialogRootSizer->Add(dialogToSizer, 0, wxEXPAND, 0);
	dialogRootSizer->AddSpacer(4);
	dialogRootSizer->Add(dialogScriptSizer, 0, wxEXPAND, 0);	

	this->SetSizer(dialogRootSizer);
	dialogRootSizer->SetSizeHints(this);
	dialogRootSizer->Fit(this);	
}

void DialogTextRange::OnGoButton(wxCommandEvent& event)
{
	if(dialogInputFrom->GetLineLength(0) == 0)
	{
		wxMessageBox("We need a number to start from...", "Huh?");
		event.Skip();
		return;
	}
	
	if(dialogInputTo->GetLineLength(0) == 0)
	{
		wxMessageBox("We need a number to end from...", "Huh?");
		event.Skip();
		return;
	}
	
	if(dialogInputScript->GetLineLength(0) == 0)
	{
		wxMessageBox("We need a script to get the text from...", "Huh?");
		event.Skip();
		return;
	}
	
	size_t from = std::stoi(dialogInputFrom->GetValue().ToStdString());
	size_t to  = std::stoi(dialogInputTo->GetValue().ToStdString());
	size_t script = std::stoi(dialogInputScript->GetValue().ToStdString());
		
	m_pParent->ScriptTextRange(from, to, script);
	
	this->EndModal(wxID_OK);
	event.Skip();
}
