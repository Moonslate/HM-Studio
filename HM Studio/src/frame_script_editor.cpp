#include "frame_script_editor.hpp"

cScriptEditor::cScriptEditor(id i) : wxFrame(nullptr, wxID_ANY, "Script Editor"), romOriginal(i, false), romTranslated(i, true), m_Editor(romOriginal, romTranslated)
{
	CreateGUIControls();
	SetupRom();
	
#ifdef USESPELL
	tScriptTranslated->SetHunspell(Studio::GetHunspell(), false);
#endif
}

cScriptEditor::~cScriptEditor()
{

}

void cScriptEditor::SetupRom()
{
	switch (romOriginal.Console)
	{
	case console::DS:
	{
		m_lineEnding = "\n";
		m_lineLineEnding = "\\n";
		std::vector<std::string> varsDS;
		varsDS.push_back("<Player>");
		ConfigureSTC(30, STC_EOL_LF, varsDS, tScriptOriginal);
		ConfigureSTC(30, STC_EOL_LF, varsDS, tScriptTranslated);
		break;
	}
	case console::GBA:
	{
		m_lineEnding = "\r\n";
		m_lineLineEnding = "\\n";
		std::vector<std::string> vars;
		vars.push_back("<PlayerName>");
		vars.push_back("<AnimalName>");
		vars.push_back("<Variable02>");
		ConfigureSTC(28, STC_EOL_CRLF, vars, tScriptOriginal);
		ConfigureSTC(28, STC_EOL_CRLF, vars, tScriptTranslated);
		break;
	}
	default:
		break;
	}

	this->SetTitle(wxString(_("Script Editor - ")) << romOriginal.Name);
}

void cScriptEditor::ConfigureSTC(size_t maxLine, int eol, std::vector<std::string> vars, STC* stc)
{
	stc->SetMaxLineLenght(maxLine);
	stc->SetEOLMode(eol);	

	stc->InsertOnCtrlKey(std::string(1, (char)0x05), 'E');
	stc->InsertOnCtrlKey(std::string(1, (char)0x0c) + m_lineEnding, 'R');

	for (const std::string& s : vars)
	{
		stc->AddVar(s);
	}
}

void cScriptEditor::BackupText()
{
	m_Editor.BackupText(tScriptTranslated->GetText().ToStdString());
	m_pMenuString_Restore->Enable(true);
}

void cScriptEditor::RestoreText()
{	
	UpdateText();
	tScriptTranslated->SetText(m_Editor.GetBackupText());
	m_Editor.ReleaseBackup();
}

void cScriptEditor::OpenScript(size_t index)
{	
	//ToDo: New Open Script Error Handler
	//if (!script.HaveText())
	//{
	//	wxMessageBox(_("This script don't have text."), _("Huh?"), 5L, this);
	//	return;
	//}			
	m_Editor.OpenScript(index);	
	UpdateScript();
}

void cScriptEditor::SaveScript()
{		
	m_Editor.SaveScript();
}

void cScriptEditor::UpdateScript()
{
	this->SetTitle(wxString() << "Script Editor - " << romOriginal.Name << ": Script " << m_Editor.GetNumber());

	UpdateText();
}

//ToDo: Fix this
void cScriptEditor::CheckAllCode()
{
	std::vector<uint32_t> offsetOriginal;
	std::vector<uint32_t> sizeOriginal;

//	romOriginal.GetOffset(offsetOriginal);
//	romOriginal.GetSize(offsetOriginal, sizeOriginal);

	std::vector<uint32_t> offsetTranslated;
	std::vector<uint32_t> sizeTranslated;

//	romTranslated.GetOffset(offsetTranslated);
//	romTranslated.GetSize(offsetTranslated, sizeTranslated);

	Script scriptOriginal;
	Script scriptTranslated;

	std::vector<std::pair<uint32_t, uint32_t>> wrong;

	/*for (uint32_t i = 0; i < romOriginal.Offset.Script_count; ++i)
	{
		romOriginal.Seek(offsetOriginal[i]);
		romTranslated.Seek(offsetTranslated[i]);

		std::vector<uint8_t> bytesOriginais;
		std::vector<uint8_t> bytesTranslated;

		romOriginal.ReadBytes(bytesOriginais, sizeOriginal[i]);
		romTranslated.ReadBytes(bytesTranslated, sizeOriginal[i]);

		scriptOriginal.SetData(bytesOriginais);
		scriptTranslated.SetData(bytesTranslated);

		if (!scriptOriginal.CompareCode(scriptTranslated))
		{
			wrong.push_back(std::make_pair(i, offsetTranslated[i]));
		}
	}*/
	
	std::string eol = wxString(wxTextBuffer::GetEOL()).ToStdString();

	if (wrong.size() > 0)
	{
		std::stringstream s;
		s << "The following scripts have incorrect code: " << eol << eol;

		for (size_t i = 0; i < wrong.size(); ++i)
		{
			char buffer[8];
			sprintf(buffer, "%x", wrong[i].second);
			s << "Script " << std::to_string(wrong[i].first) << " at offset 0x" << std::string(buffer) << eol;
		}

		s << eol  << "Please, open these scripts and run script checker to get more information." << eol;

		wxFileName fileName(wxStandardPaths::Get().GetExecutablePath());
		fileName.AppendDir(romOriginal.Name);
		fileName.AppendDir("Script");
		fileName.AppendDir("Check");

		fileName.SetExt("txt");
		fileName.SetName("code");

		if (!fileName.DirExists())
			fileName.Mkdir();

		std::string path = fileName.GetFullPath().ToStdString();

		wxFile file;
		file.Create(path, true);
		file.Open(path, wxFile::read_write);
		file.Write(s.str());

		s << "A file on " << path << " was created.";

		wxMessageBox(wxString(s.str()), wxMessageBoxCaptionStr, 5L, this);

		return;
	}

	wxMessageBox(wxString("All scripts in this ROM are working"), wxMessageBoxCaptionStr, 5L, this);
}

void cScriptEditor::FindText()
{
	FrameSearchScript search_text;

	int result = search_text.ShowModal();	

	if (result == FrameSearchScript::SearchMode::Find)
	{		
		std::vector<FindResult> results;

		FindResult result;
		result.m_Path = "Script " + std::to_string(m_Editor.GetNumber());

		for (size_t C = 0; C < m_Editor.GetCount(); C++)
		{
			size_t index = m_Editor[C].find(search_text.find);

			while (index != std::string::npos)
			{
				result.m_Hits.push_back(index);
				index = m_Editor[C].find(search_text.find, index);
			}

			if (result.m_Hits.size() != 0)
				results.push_back(result);
		}

		if (!m_pFindResultsWindow)
		{
			m_pFindResultsWindow = new FindResultsWindow(this, wxID_ANY);
			m_pFindResultsWindow->Bind(EVT_FINDRESULT_CLICK, &cScriptEditor::OnResultClick, this);
			global_sizer->Add(m_pFindResultsWindow, 0, wxEXPAND, 0);
		}
		//m_pFindResultsWindow->SetResultsInfo(search_text.find, romOriginal.Offset.Script_count, results);
		m_pFindResultsWindow->Show();
		Layout();		
	}
	else if (result == FrameSearchScript::SearchMode::Replace || result == FrameSearchScript::SearchMode::ReplaceExtended)
	{
		if(result == FrameSearchScript::SearchMode::SearchInScripts)

		if (result == FrameSearchScript::SearchMode::ReplaceExtended)
		{
			StringUtil::Replace(m_lineLineEnding, m_lineEnding, search_text.find);
			StringUtil::Replace(m_lineLineEnding, m_lineEnding, search_text.replace);
			StringUtil::Replace("\\r", "\r", search_text.replace);
			StringUtil::Replace("\\r", "\r", search_text.find);
		}

		for (std::string& s : m_Editor.GetTranlated())
		{
			StringUtil::Replace(search_text.find, search_text.replace, s);
		}
		
		UpdateText();
	}
	else if (result == FrameSearchScript::ReplaceInScripts)
	{
		m_Editor.ReplaceInAllScripts(search_text.find, search_text.replace);
	}

	else if (result == FrameSearchScript::SearchInScripts)
	{
		std::vector<FindResult> results;

		std::string format = ScriptEditor::PathFormat(romTranslated);

		/*for (int i = 0; i < romOriginal.Offset.Script_count; ++i)
		{			
			std::vector<uint8_t> bytes = File::ReadAllBytes(ScriptEditor::FormatPath(i, format));

			Script script;
			script.SetData(bytes);

			if (!script.HaveText())
			{
				continue;
			}

			std::vector<std::string> text = script.GetText();

			FindResult findResult;
			findResult.m_Path = ScriptEditor::FormatPath(i, ScriptEditor::NameFormat(romTranslated));
			findResult.m_Id = i;

			for (size_t x = 0; x < text.size(); ++x)
			{
				size_t index = text[x].find(search_text.find);				

				while (index != std::string::npos)
				{
					findResult.m_Hits.push_back(x);
					index = text[x].find(search_text.find, index + search_text.find.size());
				}
			}

			if (findResult.m_Hits.size() > 0)
				results.push_back(findResult);
		}*/

		if (!m_pFindResultsWindow)
		{
			m_pFindResultsWindow = new FindResultsWindow(this, wxID_ANY);
			m_pFindResultsWindow->Bind(EVT_FINDRESULT_CLICK, &cScriptEditor::OnResultClick, this);
			global_sizer->Add(m_pFindResultsWindow, 0, wxEXPAND, 0);
		}		
		//m_pFindResultsWindow->SetResultsInfo(search_text.find, romOriginal.Offset.Script_count, results);
		m_pFindResultsWindow->Show();
		Layout();		
	}
}

void cScriptEditor::tScritpTranslatedOnModified(wxStyledTextEvent& event)
{	
	event.Skip();
}

void cScriptEditor::tScriptTranslatedOnUi(wxStyledTextEvent& event)
{		
	CallAfter(&cScriptEditor::UpdateStatusText, tScriptTranslated);

	event.Skip();	
}

void cScriptEditor::OnPrevScriptClick(wxCommandEvent& event)
{
	CheckAndGoScript(m_Editor.GetNumber() - 1);

	event.Skip();
}

void cScriptEditor::OnProxScriptClick(wxCommandEvent& event)
{
	CheckAndGoScript(m_Editor.GetNumber() + 1);

	event.Skip();
}

void cScriptEditor::CheckAndGoScript(size_t number)
{
	switch (m_Editor.CheckAndGoScript(number))
	{
	case ScriptFlags::ERROR_NOTEXT:
		wxMessageBox("This script have no text.", "Huh?", wxICON_ERROR);
		break;
	case ScriptFlags::SUCCESS:
		UpdateScript();
	default:
		break;
	}
}

void cScriptEditor::OnGoScriptClick(wxCommandEvent& event)
{
	wxTextEntryDialog ted(this, "Got to script ", "Enter a number");
	ted.SetTextValidator(wxFILTER_NUMERIC);
	ted.SetMaxLength(4);

	if (ted.ShowModal() == wxID_OK)
	{
		CheckAndGoScript(std::stoi(ted.GetValue().ToStdString()));
	}

	event.Skip();
}

void cScriptEditor::OnPrevTextClick(wxCommandEvent& event)
{
	if (m_Editor.PrevText())
	{
		UpdateText();
	}
}

void cScriptEditor::OnProxTextClick(wxCommandEvent& event)
{
	if (m_Editor.ProxText())
	{
		UpdateText();
	}
}

void cScriptEditor::OnMenuHorizontalMode(wxCommandEvent& event)
{
	if (m_Vertical) SetEditorHorizontal();
	else SetEditorVertical();

	m_Vertical = !m_Vertical;

	event.Skip();
}

void cScriptEditor::OnMenuGetTextFrom(wxCommandEvent& event)
{
	TextFromScriptDialog dialog(m_Editor);

	if (dialog.ShowModal() == wxOK)
	{
		m_Editor.SetText(dialog.GetText());
		UpdateText();
	}

	event.Skip();
}

void cScriptEditor::OnSaveTextClick(wxCommandEvent& event)
{
	if (romOriginal.Console == console::GBA)
		tScriptTranslated->ConvertEOLs(STC_EOL_CRLF);
	else
		tScriptTranslated->ConvertEOLs(STC_EOL_LF);

	if (m_Editor.SaveText(tScriptTranslated->GetText().ToStdString()))
	{
		UpdateText();
	}

	event.Skip();
}

void cScriptEditor::OnSaveScriptClick(wxCommandEvent& event)
{
	SaveScript();
	event.Skip();
}

void cScriptEditor::OnInsertScriptClick(wxCommandEvent& event)
{
	SaveScript();
	
	ScriptFlags flag = m_Editor.Insert(romTranslated, m_Editor.GetScript(), m_Editor.GetNumber());

	std::string message;	

	std::string sucessMessage = "The script was inserted, ";
	bool succes = true;
	long icon = 0;

	switch (flag)
	{		
	case ScriptFlags::INSERT_LESS:
		icon = wxICON_NONE;
		message =  sucessMessage + "and now have empty bytes.";
		break;
	case ScriptFlags::INSERT_VERIFY:
		icon = wxICON_INFORMATION;
		message = sucessMessage + "but the old script was missing.";
		break;
	case ScriptFlags::INSERT_LARGER:
		message = sucessMessage + "and empty bytes was used.";
		icon = wxICON_NONE;
		break;
	case ScriptFlags::INSERT_FIND:
		message = sucessMessage + "and needed to be moved to other offset.";
		icon = wxICON_WARNING;
		break;
	case ScriptFlags::INSERT_NONE:
		message = "The script was not inserted. There are no space.";
		icon = wxICON_ERROR;
		succes = false;
		break;
	default:
		break;
	}

	wxMessageBox(message, succes ? "Yeah!!" : "Huh?", icon, this);
}

void cScriptEditor::EVT_MENU_FindText(wxCommandEvent& event)
{
	FindText();
}

void cScriptEditor::EVT_MENU_FindNextText(wxCommandEvent& event)
{

	event.Skip();
}

void cScriptEditor::EVT_MENU_RestoreString(wxCommandEvent& event)
{
	RestoreText();
	event.Skip();
}

void cScriptEditor::OnMenuAlwaysOnTop(wxCommandEvent& event)
{	
	menuBar->Check(wxID_TOP, this->ToggleWindowStyle(wxSTAY_ON_TOP));
	event.Skip();
}

void cScriptEditor::OnCheckAllCode(wxCommandEvent& event)
{
	CheckAllCode();
	event.Skip();
}

void cScriptEditor::OnClosing(wxCloseEvent& event)
{
	event.Skip();
}

void cScriptEditor::OnOpenInHexEditorClick(wxCommandEvent& event)
{
	event.Skip();
}

void cScriptEditor::OnSTCLeftDown(wxMouseEvent& event)
{
	if (m_IndicatorPos.first != -1)
	{
		tScriptTranslated->IndicatorClearRange(m_IndicatorPos.first, m_IndicatorPos.first + m_IndicatorPos.second);
		m_IndicatorPos.first = -1;
	}
	event.Skip();
}

void cScriptEditor::OnResultClick(wxCommandEvent& event)
{	
	FindResult* result = (FindResult*)event.GetClientData();

	CheckAndGoScript(result->m_Id);

	size_t findIndex = event.GetInt();
	
	m_Editor.SetIndex(findIndex);
	UpdateText();

	wxString find = event.GetString();
		
	m_IndicatorPos = std::make_pair(tScriptTranslated->FindText(0, tScriptTranslated->GetTextLength(), find), find.size());

	if (m_IndicatorPos.first != -1)
	{		
//		tScriptTranslated->SetIndicatorCurrent(INDIC_FINDSTRING);
		tScriptTranslated->IndicatorFillRange(m_IndicatorPos.first, m_IndicatorPos.second);
		tScriptTranslated->SetSelection(m_IndicatorPos.first, m_IndicatorPos.first + m_IndicatorPos.second);
	}

	delete result;

	event.Skip();
}

void cScriptEditor::OnSetTextRange(wxCommandEvent& event)
{
	DialogTextRange dialog(this);
	
	dialog.ShowModal();
	
	event.Skip();
}

void cScriptEditor::UpdateStatusText(wxStyledTextCtrl* stc)
{
	statusBar->SetStatusText(wxString("Size: ") << std::to_string(stc->GetTextLength()), 1);

	statusBar->SetStatusText(wxString("Ln: ") << stc->GetCurrentLine() + 1, 2);

	int selSize = (stc->GetSelectionEnd() - stc->GetSelectionStart());

	if (selSize > 0)
		selSize = stc->GetSelectedText().size();

	statusBar->SetStatusText(wxString("Sel: ") << selSize, 3);

	statusBar->SetStatusText(wxString("Col: ") << tScriptTranslated->GetColumn(tScriptTranslated->GetCurrentPos()), 4);
}

void cScriptEditor::UpdateText()
{	
	tScriptOriginal->SetText(m_Editor.GetCurOriginal());
	tScriptTranslated->SetText(m_Editor.GetCurTranslated());	

	statusBar->SetStatusText(wxString("Index: ") << std::to_string(m_Editor.GetIndex() + 1) << "/" << std::to_string(m_Editor.GetCount()));
		
	m_Editor.SetSaved(false);
	m_Editor.SetChanged(false);	
}

void cScriptEditor::CreateGUIControls()
{
	//images
	uint8_t* delete_icon_data = new uint8_t[796]{ 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10,
											 0x00, 0x00, 0x00, 0x10, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x02, 0xe3, 0x49, 0x44, 0x41,
											 0x54, 0x78, 0xda, 0x6d, 0x53, 0x4d, 0x48, 0x1b, 0x41, 0x14, 0x7e, 0x6f, 0x13, 0xb3, 0x49, 0xc4, 0x5a, 0x93, 0xc6, 0xe4,
											 0x20, 0x14, 0x44, 0x14, 0x2f, 0x2a, 0x11, 0x41, 0x4b, 0x31, 0x46, 0xeb, 0x2f, 0x52, 0x3c, 0x54, 0x34, 0x0a, 0x62, 0x25,
											 0x5a, 0x0f, 0x36, 0xe2, 0xa9, 0xf4, 0x56, 0xf0, 0xd6, 0x8b, 0x28, 0x16, 0x4d, 0x14, 0x51, 0x0f, 0xde, 0x14, 0xb4, 0x85,
											 0xe8, 0x49, 0x53, 0x94, 0x78, 0x50, 0x91, 0x9c, 0x44, 0x3c, 0x28, 0xb5, 0x51, 0x34, 0x8d, 0xb1, 0x34, 0x3f, 0x66, 0xb3,
											 0xbb, 0x9d, 0x99, 0xac, 0x52, 0xa1, 0x0f, 0x86, 0x9d, 0x9d, 0x79, 0xdf, 0x37, 0xdf, 0xfb, 0x43, 0x50, 0x8c, 0x23, 0xcb,
											 0xa2, 0xd5, 0xa2, 0xab, 0xb0, 0xd0, 0xfa, 0x26, 0x2f, 0x6f, 0xc0, 0xc8, 0xf3, 0x76, 0x72, 0xf4, 0x5c, 0xb9, 0x3e, 0xbb,
											 0x49, 0x26, 0x37, 0x97, 0xcf, 0xcf, 0x3d, 0xe3, 0xc7, 0xc7, 0x07, 0xc1, 0x78, 0x5c, 0x96, 0x94, 0x0b, 0xbc, 0x07, 0xbf,
											 0x32, 0x9b, 0xf5, 0x5f, 0xac, 0xd6, 0xf1, 0xa7, 0x1a, 0x4d, 0x2f, 0x97, 0x3e, 0x42, 0x62, 0xcc, 0x49, 0x96, 0x65, 0xf6,
											 0x21, 0x20, 0xe9, 0x77, 0x32, 0x39, 0xef, 0x3a, 0x3c, 0x1c, 0xf6, 0x5e, 0x5c, 0xc4, 0x28, 0x09, 0x52, 0xcf, 0xba, 0xdc,
											 0x5c, 0xfd, 0x7c, 0x45, 0x85, 0x57, 0xa3, 0x56, 0xbf, 0x44, 0x0a, 0x54, 0xc8, 0x15, 0x20, 0x28, 0x44, 0xec, 0x8f, 0x2c,
											 0x59, 0x10, 0xc5, 0xed, 0xfe, 0xbd, 0xbd, 0x66, 0xef, 0xe5, 0x65, 0x0c, 0xcd, 0x3c, 0x8f, 0x5b, 0xd5, 0xd5, 0x1e, 0x83,
											 0x56, 0xdb, 0xc7, 0x71, 0x1c, 0x6a, 0x5a, 0x5a, 0x90, 0xba, 0x26, 0xbd, 0x5e, 0xf2, 0x9e, 0x22, 0x54, 0xad, 0x06, 0xbe,
											 0xad, 0x0d, 0xa4, 0x50, 0x08, 0x04, 0x9f, 0x4f, 0x96, 0x08, 0xf3, 0x6d, 0x32, 0x39, 0x67, 0xf7, 0xf9, 0x06, 0xf0, 0x53,
											 0x71, 0x71, 0xf9, 0xbb, 0xfc, 0xfc, 0x5d, 0x0e, 0x51, 0xc5, 0xb7, 0xb6, 0xa2, 0xae, 0xa7, 0x87, 0x69, 0xb8, 0x5b, 0x5d,
											 0x85, 0xc4, 0xd2, 0x12, 0x09, 0x86, 0x03, 0xdd, 0xe0, 0x20, 0x68, 0x6c, 0x36, 0x12, 0x83, 0x04, 0xb1, 0x89, 0x09, 0x10,
											 0x76, 0x76, 0x28, 0x89, 0xb8, 0x70, 0x7a, 0x5a, 0x89, 0x81, 0xda, 0x5a, 0xb7, 0x89, 0xe7, 0x9d, 0x34, 0x60, 0x6c, 0x6a,
											 0xc2, 0x6c, 0xa7, 0x93, 0xc4, 0xc5, 0x31, 0xc1, 0x77, 0x6b, 0x6b, 0x80, 0xd9, 0xd9, 0xa0, 0xa9, 0xa9, 0x61, 0x42, 0xa4,
											 0x54, 0x0a, 0x6e, 0xc7, 0xc6, 0x00, 0xfc, 0x7e, 0x99, 0x5a, 0x44, 0x10, 0x66, 0x31, 0xd8, 0xd8, 0x78, 0x4c, 0xee, 0x0a,
											 0x58, 0xa0, 0x04, 0x88, 0xed, 0xed, 0x90, 0xd3, 0xd1, 0x91, 0x26, 0xb9, 0xcf, 0x06, 0x21, 0x93, 0x44, 0x11, 0xc2, 0x33,
											 0x33, 0xc0, 0x6d, 0x6c, 0xa4, 0x93, 0x9a, 0x4e, 0xd0, 0x09, 0xfe, 0x6c, 0x68, 0xb8, 0x23, 0x9b, 0x0c, 0x56, 0x11, 0x0a,
											 0x20, 0x40, 0xce, 0xe1, 0x00, 0x03, 0x25, 0x41, 0x64, 0x7e, 0x54, 0xfa, 0x2f, 0xb7, 0x1b, 0x80, 0x80, 0x59, 0x5e, 0x94,
											 0xaa, 0x90, 0x25, 0xe0, 0x0f, 0x4a, 0x20, 0xcb, 0x8c, 0x80, 0xbd, 0x97, 0x91, 0x01, 0x59, 0x43, 0x43, 0xa0, 0xad, 0xab,
											 0x83, 0x07, 0x23, 0x80, 0xd8, 0xca, 0x0a, 0x44, 0x17, 0x16, 0x18, 0x81, 0xac, 0x9c, 0x12, 0x84, 0x80, 0x67, 0x34, 0x04,
											 0x51, 0x2c, 0xa0, 0xe5, 0x03, 0x95, 0x0a, 0x9e, 0xb8, 0x5c, 0xa0, 0x53, 0xc0, 0x12, 0x71, 0xa6, 0x2a, 0x58, 0x19, 0x09,
											 0x49, 0x74, 0x79, 0x19, 0xfe, 0x2c, 0x2e, 0xde, 0x93, 0xc8, 0xc4, 0xff, 0x04, 0x77, 0xeb, 0xeb, 0xdd, 0x96, 0x54, 0xca,
											 0x49, 0x62, 0xc6, 0x4c, 0x87, 0x03, 0xb3, 0xba, 0xbb, 0x99, 0x16, 0x1a, 0xf3, 0xf5, 0xf4, 0x34, 0x70, 0x39, 0x39, 0xf0,
											 0xac, 0xb3, 0x33, 0x9d, 0x13, 0x02, 0x8c, 0x4c, 0x4e, 0x42, 0x62, 0x7d, 0x9d, 0x25, 0x31, 0xac, 0xd1, 0xcc, 0xe2, 0x87,
											 0x92, 0x92, 0xf2, 0x7e, 0xa3, 0x71, 0x97, 0x5c, 0xab, 0xd4, 0x76, 0x3b, 0x9a, 0x46, 0x46, 0x18, 0xc1, 0xd5, 0xd4, 0x14,
											 0x48, 0xb4, 0x17, 0x68, 0x1b, 0x74, 0x75, 0x81, 0x89, 0xe4, 0x45, 0x12, 0x04, 0xb8, 0x1e, 0x1d, 0x05, 0x71, 0x7f, 0x5f,
											 0x96, 0x10, 0xc5, 0xc5, 0x48, 0xa4, 0x12, 0x8d, 0xa4, 0xff, 0xbf, 0xd9, 0x6c, 0x1e, 0x53, 0x22, 0xd1, 0x47, 0x55, 0x60,
											 0x55, 0x15, 0x6b, 0x24, 0xd9, 0xef, 0x67, 0xb2, 0x69, 0x5e, 0x64, 0x5a, 0x1d, 0xbb, 0x1d, 0xe4, 0x70, 0x18, 0xf0, 0xf0,
											 0x90, 0x35, 0xd2, 0x8d, 0x4e, 0x37, 0xd7, 0x4a, 0x1b, 0x89, 0x3a, 0xbc, 0xb0, 0x58, 0xf4, 0xd3, 0x65, 0x65, 0x5e, 0x3e,
											 0x1a, 0x7d, 0xd4, 0xca, 0xf0, 0xd8, 0x1e, 0x5a, 0x39, 0x99, 0x99, 0xb9, 0xfd, 0x3e, 0x10, 0x68, 0xde, 0x0a, 0x06, 0x63,
											 0x0f, 0xc3, 0x54, 0x45, 0x48, 0x3e, 0x97, 0x96, 0x8e, 0x1b, 0xe2, 0xf1, 0x5e, 0x95, 0x24, 0x71, 0xff, 0x23, 0x10, 0x39,
											 0x4e, 0x8a, 0xe8, 0xf5, 0xf3, 0x1f, 0x03, 0x81, 0xe1, 0xef, 0x04, 0x2c, 0xfd, 0xeb, 0x44, 0x37, 0x06, 0x32, 0x17, 0x6f,
											 0x8b, 0x8a, 0xac, 0xaf, 0xcd, 0xe6, 0x81, 0x5c, 0x44, 0x3b, 0xa6, 0x52, 0x6c, 0x9c, 0x65, 0xb5, 0xfa, 0x2c, 0x04, 0xb0,
											 0xf9, 0xf5, 0xea, 0xca, 0x33, 0x77, 0x74, 0x74, 0x10, 0x4a, 0x24, 0x94, 0x31, 0x03, 0xf8, 0x0b, 0x74, 0x9a, 0x4e, 0xf3,
											 0x6a, 0xfb, 0x10, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82 };

	m_DeleteIcon = wxBitmap::NewFromPNGData(delete_icon_data, 796);

	delete[] delete_icon_data;

	this->SetBackgroundColour(Studio::GetFrameColour());
	this->SetForegroundColour(Studio::GetFontColour());

	/******************************

		Menu creation starts

	*******************************/
	menuBar = new wxMenuBar();

	//wxSub

	menuScript = new wxMenu();
	menuScript->Append(wxID_SAVE, _("Save\tCtrl-Shift-S"), nullptr, _("Save the current script"));
	menuScript->Append(wxID_OPEN, "Get text from...");
	menuBar->Append(menuScript, _("File"));

	menuString = new wxMenu();
	menuString->Append(ID_MENU_STRING_SAVE, _("Save\tCtrl-S"), nullptr, _("Save the current string"));
	menuString->Append(ID_MENU_STRING_PREV, _("Prev\tAlt-Left"), nullptr, _("Loads the next string"));
	menuString->Append(ID_MENU_STRING_PROX, _("Next\tAlt-Right"), nullptr, _("Loads the previous string"));
	m_pMenuString_Restore = menuString->Append(ID_MENU_STRING_RESTORE, _("Restore\tAlt-Z"), nullptr, _("Restore a text not saved"));
	menuBar->Append(menuString, _("String"));

	m_pMenuString_Restore->Enable(false);

	menuEdit = new wxMenu();
	menuEdit->Append(wxID_ANY, _("Move To"));
	menuBar->Append(menuEdit, _("Edit"));

	menuSearch = new wxMenu();
	menuSearch->Append(wxID_FIND, "Find Text\tCtrl-F");
	menuSearch->Append(ID_MENU_FIND_NEXT, "Find Next Text\tF3");
	menuSearch->Append(wxID_ANY, "Find Next Script");
	menuBar->Append(menuSearch, "Search");

	menuTools = new wxMenu();
	menuTools->Append(wxID_ANY, "Check All Pointers");
	menuTools->Append(wxID_ANY, "Check All Codes");
	menuTools->Append(ID_MENU::TOOLS_TEXTRANGE, "Set Text And Insert Script Range");
	menuTools->Append(wxID_ANY, "Show Previwer");
	menuTools->Append(wxID_ANY, "Show One By One");
	menuTools->Append(ID_MENU_OPENHEX_ORIGINAL, "Open Original Hex Editor");
	menuTools->Append(ID_MENU_OPENHEX_TRANSLATED, "Open Translated Hex Editor");
	menuBar->Append(menuTools, "Tools");

	menuOptions = new wxMenu();
	menuOptions->AppendCheckItem(wxID_TOP, "Always On Top");
	menuOptions->Append(ID_MENU_HVMODE, "Horizontal Mode");
	menuBar->Append(menuOptions, "Options");

	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnMenuGetTextFrom, this, wxID_OPEN);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnSaveScriptClick, this, wxID_SAVE);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnSaveTextClick, this, ID_MENU_STRING_SAVE);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnPrevTextClick, this, ID_MENU_STRING_PREV);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnProxTextClick, this, ID_MENU_STRING_PROX);	
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::EVT_MENU_FindText, this, wxID_FIND);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::EVT_MENU_FindNextText, this, ID_MENU_FIND_NEXT);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::EVT_MENU_RestoreString, this, ID_MENU_STRING_RESTORE);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnMenuAlwaysOnTop, this, wxID_TOP);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnMenuHorizontalMode, this, ID_MENU_HVMODE);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnOpenInHexEditorClick, this, ID_MENU_OPENHEX_ORIGINAL);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnOpenInHexEditorClick, this, ID_MENU_OPENHEX_TRANSLATED);
	menuBar->Bind(wxEVT_MENU, &cScriptEditor::OnSetTextRange, this, ID_MENU::TOOLS_TEXTRANGE);

	SetMenuBar(menuBar);

	statusBar = CreateStatusBar(5);
	//statusBar->SetStatusText("Original Size: 0", 0);
	statusBar->SetStatusText("Ready!", 0);
	statusBar->SetStatusText("Lines: 1", 1);
	statusBar->SetStatusText("Ln: 0", 2);
	statusBar->SetStatusText("Sel: 0", 3);
	statusBar->SetStatusText("Col: 0", 4);

	int widths[5] = { -5, -1, -1, -1, -1 };

	statusBar->SetStatusWidths(statusBar->GetFieldsCount(), widths);

	//--------------------//
	// Menu creation ends //
	//--------------------//	


//-----------------------------------------------------------------//

	CreateMyToolBar();

	wxSize button_min_size = wxSize(40, 26);	

	tScriptTranslated = new STC(this, wxID_ANY);

	tScriptOriginal = new STC(this, wxID_ANY);
	
	tScriptTranslated->Bind(wxEVT_STC_CHANGE, &cScriptEditor::tScritpTranslatedOnModified, this);
	tScriptTranslated->Bind(wxEVT_STC_UPDATEUI, &cScriptEditor::tScriptTranslatedOnUi, this);
	tScriptTranslated->Bind(wxEVT_LEFT_DOWN, &cScriptEditor::OnSTCLeftDown, this);
#ifdef Testing
	tScriptTranslated->Bind(wxEVT_STC_CHARADDED, &cScriptEditor::tScriptTranslatedCharAdded, this);
#endif // Testing

	editor_save_text = new wxButton(this, wxID_ANY, "Save");
	editor_save_text->Bind(wxEVT_BUTTON, &cScriptEditor::OnSaveTextClick, this);
	editor_prev_text = new wxButton(this, wxID_ANY, "<<");
	editor_prev_text->Bind(wxEVT_BUTTON, &cScriptEditor::OnPrevTextClick, this);
	editor_prev_text->SetMinSize(button_min_size);
	editor_next_text = new wxButton(this, wxID_ANY, ">>");
	editor_next_text->Bind(wxEVT_BUTTON, &cScriptEditor::OnProxTextClick, this);
	editor_next_text->SetMinSize(button_min_size);

	editor_buttons_sizer = new wxBoxSizer(wxHORIZONTAL);
	editor_buttons_sizer->Add(editor_save_text, 0, wxALL | wxEXPAND, 0);
	editor_buttons_sizer->AddStretchSpacer(1);
	editor_buttons_sizer->Add(editor_prev_text, 0, wxALL | wxEXPAND, 0);
	editor_buttons_sizer->AddSpacer(4);
	editor_buttons_sizer->Add(editor_next_text, 0, wxALL | wxEXPAND, 0);

	editor_sizer = new wxBoxSizer(wxVERTICAL);	
	editor_sizer->Add(tScriptTranslated, 2, wxALL | wxEXPAND, 0);
	editor_sizer->Add(editor_buttons_sizer, 0, wxUP | wxBOTTOM | wxEXPAND, 4);
	editor_sizer->Add(tScriptOriginal, 2, wxALL | wxEXPAND, 0);

	global_sizer = new wxBoxSizer(wxVERTICAL);	
	global_sizer->Add(editor_sizer, 1, wxALL | wxEXPAND, 0);	

	this->Bind(wxEVT_CLOSE_WINDOW, &cScriptEditor::OnClosing, this);

	SetSizer(global_sizer);
	global_sizer->Fit(this);
	global_sizer->SetSizeHints(this);
}

void cScriptEditor::SetEditorVertical()
{	
	if (editor_sizer != nullptr)
		editor_sizer->SetOrientation(wxVERTICAL);

	Layout();

	global_sizer->Fit(this);
	global_sizer->SetSizeHints(this);
}

void cScriptEditor::SetEditorHorizontal()
{
	if (editor_buttons_sizer != nullptr)
	{
		editor_sizer->Detach(1);
		global_sizer->Add(editor_buttons_sizer, 0, wxUP | wxBOTTOM | wxEXPAND, 4);
	}	

	if (editor_sizer != nullptr)
		editor_sizer->SetOrientation(wxHORIZONTAL);

	Layout();

	global_sizer->Fit(this);
	global_sizer->SetSizeHints(this);
}

void cScriptEditor::CreateMyToolBar()
{

	uint8_t* prevScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x89, 0xbc, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0xe0, 0xee, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xbe, 0xda, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x4f, 0x9f, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x88, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x34, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf2, 0xf8, 0xfb, 0xf5, 0xfa, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x77, 0xb2, 0x1c, 0x85, 0xba, 0x22, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0xf9, 0xfc, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xf5, 0xfa, 0xfc, 0xfd, 0xfe, 0xfe, 0x36, 0x8e, 0xb9, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xe4, 0xef, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xf6, 0xfa, 0xfd, 0xc8, 0xe2, 0xee, 0x55, 0x9d, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xc3, 0xda, 0x59, 0x99, 0x46, 0x76, 0xa0, 0x00, 0x30, 0x7b, 0x00, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdc, 0xee, 0xf5, 0xfa, 0xfc, 0xfe, 0xa3, 0xcf, 0xe4, 0x77, 0xaf, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xa5, 0x46, 0x7e, 0xa9, 0x00, 0xd4, 0xe1, 0x71, 0x38, 0x80, 0x00, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf3, 0xd6, 0xea, 0xf3, 0xd5, 0xea, 0xf3, 0xff, 0xff, 0xff, 0x79, 0xb8, 0xd6, 0x9b, 0xc1, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xb3, 0x59, 0x7f, 0xae, 0x00, 0xc4, 0xda, 0x58, 0xd5, 0xe4, 0x80, 0x37, 0x7f, 0x00, 0x37, 0x7f, 0x00, 0x36, 0x7e, 0x00, 0x34, 0x7d, 0x00, 0x74, 0xa8, 0x47, 0xce, 0xe7, 0xf0, 0xff, 0xff, 0xff, 0x4b, 0x9f, 0xc9, 0xc2, 0xd8, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xb1, 0x53, 0x81, 0xb2, 0x00, 0xc7, 0xe0, 0x60, 0x97, 0xc3, 0x00, 0xd8, 0xe8, 0x93, 0xd1, 0xe6, 0x4d, 0xd2, 0xe7, 0x4e, 0xd2, 0xe7, 0x4a, 0xdf, 0xec, 0x90, 0x39, 0x7f, 0x00, 0xca, 0xe3, 0xee, 0xff, 0xff, 0xff, 0x31, 0x90, 0xc1, 0xf5, 0xf5, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x8a, 0x00, 0xcd, 0xe6, 0x63, 0x9a, 0xca, 0x00, 0x98, 0xc8, 0x00, 0x97, 0xc7, 0x00, 0x99, 0xc8, 0x00, 0x99, 0xc8, 0x00, 0x99, 0xc8, 0x00, 0xcf, 0xe7, 0x6b, 0x3c, 0x81, 0x00, 0xd2, 0xe9, 0xf0, 0xfd, 0xfe, 0xff, 0x0a, 0x7c, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x9f, 0x42, 0x81, 0xb9, 0x00, 0x9f, 0xd3, 0x00, 0x9c, 0xd0, 0x00, 0x9c, 0xd0, 0x00, 0x9f, 0xd5, 0x00, 0xa1, 0xd7, 0x00, 0xa1, 0xd7, 0x00, 0xc0, 0xe7, 0x3a, 0x3c, 0x81, 0x00, 0xdc, 0xee, 0xf4, 0xe2, 0xf0, 0xf6, 0x25, 0x87, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xdd, 0xdd, 0x75, 0xa0, 0x46, 0x80, 0xbc, 0x00, 0xa0, 0xd8, 0x00, 0xa2, 0xd9, 0x00, 0x43, 0x84, 0x00, 0x4a, 0x88, 0x00, 0x4b, 0x89, 0x00, 0x4a, 0x88, 0x00, 0x80, 0xae, 0x4c, 0xea, 0xf4, 0xf8, 0x61, 0xab, 0xcf, 0x71, 0xa9, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xde, 0xde, 0x75, 0xa0, 0x46, 0x80, 0xbe, 0x00, 0xa6, 0xe4, 0x00, 0x4b, 0x89, 0x00, 0x14, 0x84, 0xdd, 0x18, 0x85, 0xd0, 0x17, 0x84, 0xcb, 0x14, 0x82, 0xc4, 0x12, 0x80, 0xb7, 0x26, 0x88, 0xba, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xde, 0xde, 0x72, 0x9e, 0x42, 0x85, 0xc6, 0x00, 0x4f, 0x8b, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xd0, 0xd0, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* prevScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* proxScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x89, 0xbc, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0xe0, 0xee, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xbe, 0xda, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x4f, 0x9f, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x88, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x34, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf2, 0xf8, 0xfb, 0xf5, 0xfa, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x77, 0xb2, 0x1c, 0x85, 0xba, 0x22, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0xf9, 0xfc, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xf5, 0xfa, 0xfc, 0xfd, 0xfe, 0xfe, 0x36, 0x8e, 0xb9, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xe4, 0xef, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xf6, 0xfa, 0xfd, 0xc8, 0xe2, 0xee, 0x55, 0x9d, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xc3, 0xda, 0xbb, 0xdb, 0xea, 0xee, 0xf7, 0xfa, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0x30, 0x7b, 0x00, 0x76, 0xa0, 0x00, 0x59, 0x99, 0x46, 0x77, 0xaf, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0xac, 0xcb, 0xcc, 0xe4, 0xf0, 0xe0, 0xef, 0xf6, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf3, 0xd6, 0xea, 0xf3, 0x38, 0x80, 0x00, 0xd4, 0xe1, 0x71, 0x7e, 0xa9, 0x00, 0x74, 0xa5, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x91, 0xbe, 0xff, 0xff, 0xff, 0xd2, 0xe9, 0xf1, 0xd1, 0xe8, 0xf0, 0x74, 0xa8, 0x47, 0x34, 0x7d, 0x00, 0x36, 0x7e, 0x00, 0x37, 0x7f, 0x00, 0x37, 0x7f, 0x00, 0xd5, 0xe4, 0x80, 0xc4, 0xda, 0x58, 0x7f, 0xae, 0x00, 0x87, 0xb3, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x8b, 0xbc, 0xff, 0xff, 0xff, 0xd3, 0xe8, 0xf1, 0xd2, 0xe8, 0xf1, 0x39, 0x7f, 0x00, 0xdf, 0xec, 0x90, 0xd2, 0xe7, 0x4a, 0xd2, 0xe7, 0x4e, 0xd1, 0xe6, 0x4d, 0xd8, 0xe8, 0x93, 0x97, 0xc3, 0x00, 0xc7, 0xe0, 0x60, 0x81, 0xb2, 0x00, 0x84, 0xb1, 0x53, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0f, 0x7f, 0xb6, 0x2e, 0x90, 0xc0, 0x29, 0x8e, 0xbf, 0x29, 0x8d, 0xbf, 0x3c, 0x81, 0x00, 0xcf, 0xe7, 0x6b, 0x99, 0xc8, 0x00, 0x99, 0xc8, 0x00, 0x99, 0xc8, 0x00, 0x97, 0xc7, 0x00, 0x98, 0xc8, 0x00, 0x9a, 0xca, 0x00, 0xcd, 0xe6, 0x63, 0x47, 0x8a, 0x00, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x81, 0x00, 0xc0, 0xe7, 0x3a, 0xa1, 0xd7, 0x00, 0xa1, 0xd7, 0x00, 0x9f, 0xd5, 0x00, 0x9c, 0xd0, 0x00, 0x9c, 0xd0, 0x00, 0x9f, 0xd3, 0x00, 0x81, 0xb9, 0x00, 0x74, 0x9f, 0x42, 0x45, 0x96, 0xbd, 0x89, 0xc1, 0xdc, 0xe0, 0xf0, 0xf5, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0x80, 0xae, 0x4c, 0x4a, 0x88, 0x00, 0x4b, 0x89, 0x00, 0x4a, 0x88, 0x00, 0x43, 0x84, 0x00, 0xa2, 0xd9, 0x00, 0xa0, 0xd8, 0x00, 0x80, 0xbc, 0x00, 0x75, 0xa0, 0x46, 0xdd, 0xdd, 0xdd, 0xbf, 0xcd, 0xd5, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x14, 0x82, 0xc4, 0x17, 0x84, 0xcb, 0x18, 0x85, 0xd0, 0x14, 0x84, 0xdd, 0x4b, 0x89, 0x00, 0xa6, 0xe4, 0x00, 0x80, 0xbe, 0x00, 0x75, 0xa0, 0x46, 0xde, 0xde, 0xde, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x4f, 0x8b, 0x00, 0x85, 0xc6, 0x00, 0x72, 0x9e, 0x42, 0xde, 0xde, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xdd, 0xdd, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* proxScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00 };

	uint8_t* goScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x89, 0xbc, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0xe0, 0xee, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xbe, 0xda, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x4f, 0x9f, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x88, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x34, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf2, 0xf8, 0xfb, 0xf5, 0xfa, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x77, 0xb2, 0x1c, 0x85, 0xba, 0x22, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0xf9, 0xfc, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xf5, 0xfa, 0xfc, 0xfd, 0xfe, 0xfe, 0x36, 0x8e, 0xb9, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xe4, 0xef, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0x00, 0x00, 0x80, 0xc8, 0xe2, 0xee, 0x55, 0x9d, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xc3, 0xda, 0xbb, 0xdb, 0xea, 0xee, 0xf7, 0xfa, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdc, 0xee, 0xf5, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x77, 0xaf, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0xac, 0xcb, 0xcc, 0xe4, 0xf0, 0xe0, 0xef, 0xf6, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf3, 0xd6, 0xea, 0xf3, 0xd5, 0xea, 0xf3, 0x00, 0x00, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x8b, 0xbc, 0xff, 0xff, 0xff, 0xd3, 0xe8, 0xf1, 0xd2, 0xe8, 0xf1, 0xd3, 0xe8, 0xf1, 0xd3, 0xe8, 0xf1, 0xd2, 0xe8, 0xf1, 0xcf, 0xe6, 0xf0, 0xca, 0xe3, 0xee, 0x00, 0x00, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0f, 0x7f, 0xb6, 0x2e, 0x90, 0xc0, 0x29, 0x8e, 0xbf, 0x29, 0x8d, 0xbf, 0x29, 0x8e, 0xbf, 0x2b, 0x8e, 0xbf, 0x2d, 0x8f, 0xc0, 0x7c, 0xba, 0xd7, 0xd2, 0xe9, 0xf0, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0xd9, 0xe9, 0x1d, 0x86, 0xbb, 0xdc, 0xee, 0xf4, 0x00, 0x00, 0x80, 0x25, 0x87, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x96, 0xbd, 0x89, 0xc1, 0xdc, 0xe0, 0xf0, 0xf5, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdd, 0xef, 0xf5, 0xe3, 0xf2, 0xf7, 0x99, 0xca, 0xdf, 0xea, 0xf4, 0xf8, 0x61, 0xab, 0xcf, 0x71, 0xa9, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xcd, 0xd5, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0d, 0x7d, 0xb6, 0x0f, 0x7e, 0xb6, 0x11, 0x7f, 0xb7, 0x12, 0x80, 0xb7, 0x26, 0x88, 0xba, 0xe5, 0xe5, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xd0, 0xd0, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* goScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

	uint8_t* saveScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7e, 0xb5, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0x1d, 0x83, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 0xb6, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x14, 0x7e, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x7a, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x35, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf4, 0xfa, 0xfc, 0xf3, 0xf9, 0xfb, 0xf4, 0xfa, 0xfc, 0xf4, 0xfa, 0xfc, 0xf4, 0xfa, 0xfc, 0xf5, 0xfa, 0xfc, 0xf8, 0xfb, 0xfd, 0xff, 0xff, 0xff, 0x02, 0x77, 0xb2, 0x1d, 0x86, 0xba, 0x24, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7f, 0xbf, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xef, 0xf8, 0xfb, 0xf5, 0xfb, 0xfc, 0xfb, 0xfe, 0xfe, 0xfd, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0x72, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7a, 0xb0, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xf0, 0xf7, 0xfb, 0x57, 0xa5, 0xcb, 0x00, 0x72, 0xae, 0x00, 0x72, 0xae, 0x00, 0x71, 0xae, 0x00, 0x71, 0xae, 0x00, 0x71, 0xaf, 0x00, 0x74, 0xb0, 0x09, 0x7b, 0xb3, 0x13, 0x80, 0xb6, 0x1b, 0x85, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x79, 0xac, 0xbb, 0xdb, 0xea, 0xf1, 0xf8, 0xfa, 0xed, 0xf7, 0xfa, 0x00, 0x73, 0xaf, 0xc6, 0xe8, 0xfd, 0xc1, 0xe4, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xe6, 0xfc, 0xce, 0xec, 0xff, 0x14, 0x81, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x76, 0xa9, 0xcc, 0xe4, 0xf0, 0xe3, 0xf0, 0xf6, 0xe7, 0xf3, 0xf7, 0x00, 0x75, 0xb0, 0xce, 0xe9, 0xfa, 0x02, 0x88, 0xda, 0xec, 0xee, 0xf0, 0xa7, 0xad, 0xb2, 0xa7, 0xad, 0xb2, 0xec, 0xee, 0xf0, 0x02, 0x88, 0xda, 0xd1, 0xea, 0xfb, 0x12, 0x7f, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x79, 0xb0, 0xff, 0xff, 0xff, 0xd5, 0xea, 0xf2, 0xe0, 0xf0, 0xf5, 0x01, 0x76, 0xb0, 0xb9, 0xe0, 0xf7, 0x19, 0x94, 0xdd, 0xe9, 0xe9, 0xee, 0xde, 0xe6, 0xef, 0xde, 0xe6, 0xef, 0xe9, 0xe9, 0xee, 0x19, 0x94, 0xdd, 0xbc, 0xe2, 0xf8, 0x12, 0x80, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x83, 0xb7, 0xff, 0xff, 0xff, 0xd5, 0xe9, 0xf1, 0xe0, 0xef, 0xf4, 0x04, 0x78, 0xb1, 0xaa, 0xd8, 0xf5, 0x2f, 0x9e, 0xe1, 0xa1, 0xca, 0xe7, 0xe0, 0xe2, 0xeb, 0xe0, 0xe2, 0xeb, 0xa1, 0xca, 0xe7, 0x2f, 0x9e, 0xe1, 0xad, 0xd9, 0xf6, 0x14, 0x80, 0xb6, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0f, 0x7f, 0xb6, 0x2e, 0x90, 0xc0, 0x2b, 0x8f, 0xbf, 0x34, 0x93, 0xc2, 0x07, 0x79, 0xb2, 0x9d, 0xd3, 0xf4, 0x41, 0xa6, 0xe4, 0x3a, 0xa4, 0xe3, 0x33, 0xa1, 0xe3, 0x32, 0xa1, 0xe2, 0x3a, 0xa4, 0xe3, 0x41, 0xa6, 0xe3, 0x9e, 0xd4, 0xf4, 0x14, 0x81, 0xb6, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x78, 0xb1, 0x91, 0xcd, 0xf2, 0x4f, 0xad, 0xe6, 0xa9, 0xcf, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xa7, 0xce, 0xe8, 0x4e, 0xad, 0xe6, 0x93, 0xce, 0xf3, 0x15, 0x81, 0xb6, 0x14, 0x7a, 0xab, 0x89, 0xc1, 0xdc, 0xe0, 0xf0, 0xf5, 0xdb, 0xed, 0xf4, 0xdd, 0xee, 0xf5, 0xe6, 0xf4, 0xf7, 0x08, 0x7a, 0xb2, 0x89, 0xca, 0xf3, 0x5c, 0xb6, 0xeb, 0xed, 0xed, 0xf2, 0x78, 0x79, 0x7f, 0xe2, 0xe9, 0xf1, 0xe9, 0xe9, 0xee, 0x5b, 0xb5, 0xea, 0x8b, 0xcc, 0xf3, 0x16, 0x81, 0xb6, 0x0f, 0x43, 0x61, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7d, 0xb5, 0x0d, 0x7d, 0xb6, 0x10, 0x7f, 0xb6, 0x13, 0x80, 0xb6, 0x8b, 0xcc, 0xf6, 0x75, 0xc2, 0xf3, 0xff, 0xfc, 0xf9, 0x91, 0x8d, 0x8b, 0xf9, 0xf9, 0xf9, 0xfc, 0xf8, 0xf4, 0x74, 0xc1, 0xf2, 0x8b, 0xcd, 0xf6, 0x18, 0x82, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x79, 0xa8, 0x18, 0x82, 0xb7, 0x14, 0x81, 0xb6, 0x10, 0x80, 0xb8, 0x0f, 0x81, 0xb9, 0x0e, 0x7f, 0xb8, 0x0f, 0x7e, 0xb6, 0x13, 0x80, 0xb6, 0x18, 0x82, 0xb7, 0x1c, 0x82, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* saveScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x23, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc6, 0x33, 0x33, 0x00, 0x00, 0x34, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x00, 0x00, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x44, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x33, 0x33, 0x33, 0x33, 0x33, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x30 };

	uint8_t* insertScriptRgb = new uint8_t[768] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7e, 0xb5, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0x1d, 0x83, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 0xb6, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x14, 0x7e, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x7a, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x99, 0xc7, 0xc0, 0xdf, 0xed, 0x32, 0x92, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfc, 0xf2, 0xf9, 0xfd, 0xf5, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x77, 0xb6, 0x0e, 0x84, 0xc2, 0x10, 0x87, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7f, 0xbf, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf6, 0xfb, 0xeb, 0xf8, 0xff, 0xeb, 0xfb, 0xff, 0xf4, 0xff, 0xff, 0xf5, 0xff, 0xff, 0x00, 0x70, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7a, 0xb0, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf1, 0xf7, 0xe4, 0xf3, 0xfc, 0xe2, 0xe3, 0xde, 0xd8, 0x8e, 0x37, 0xd8, 0x8f, 0x3c, 0xdc, 0x92, 0x3f, 0xe2, 0x98, 0x45, 0xe1, 0x9d, 0x4d, 0xdf, 0x9e, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x79, 0xac, 0xbb, 0xdb, 0xea, 0xee, 0xf7, 0xfa, 0xdd, 0xee, 0xf5, 0xdd, 0xee, 0xf5, 0xdd, 0xef, 0xf6, 0xdd, 0xf2, 0xfd, 0xdb, 0xcf, 0xb9, 0xdd, 0x9e, 0x39, 0xf9, 0xe8, 0x8f, 0xf9, 0xe8, 0x92, 0xfb, 0xe9, 0x97, 0xd8, 0x98, 0x4c, 0x9f, 0x72, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x76, 0xa9, 0xcc, 0xe4, 0xf0, 0xe0, 0xef, 0xf6, 0xd6, 0xea, 0xf2, 0xd6, 0xea, 0xf2, 0xd6, 0xeb, 0xf4, 0xd6, 0xef, 0xfe, 0xd5, 0xb8, 0x8f, 0xe6, 0xb5, 0x55, 0xfe, 0xf9, 0xd9, 0xf4, 0xd3, 0x4d, 0xe5, 0xb5, 0x4b, 0xd4, 0x95, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x79, 0xb0, 0xff, 0xff, 0xff, 0xd2, 0xe9, 0xf1, 0xd1, 0xe8, 0xf0, 0xd1, 0xe8, 0xf1, 0xd1, 0xe9, 0xf3, 0xcf, 0xee, 0xfe, 0xd2, 0xa3, 0x64, 0xf2, 0xd4, 0x88, 0xf8, 0xe0, 0x7c, 0xef, 0xcc, 0x58, 0xd5, 0x95, 0x45, 0x8c, 0x63, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x83, 0xb7, 0xff, 0xff, 0xff, 0xd3, 0xe8, 0xf1, 0xd2, 0xe8, 0xf1, 0xd3, 0xe8, 0xf1, 0xd3, 0xe9, 0xf3, 0xd0, 0xee, 0xff, 0xd8, 0x89, 0x2c, 0xff, 0xec, 0x8b, 0xf9, 0xe1, 0x6c, 0xe8, 0xc0, 0x5c, 0xd0, 0x8c, 0x3f, 0xd3, 0x92, 0x43, 0xd5, 0x95, 0x45, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0f, 0x7f, 0xb6, 0x2e, 0x90, 0xc0, 0x29, 0x8e, 0xbf, 0x29, 0x8d, 0xbf, 0x29, 0x8e, 0xbf, 0x2a, 0x8f, 0xc1, 0x29, 0x94, 0xcc, 0xe0, 0x8c, 0x25, 0xdf, 0xa1, 0x40, 0xe1, 0xaf, 0x50, 0xfd, 0xe9, 0x7d, 0xff, 0xef, 0x81, 0xe3, 0xb4, 0x57, 0xc1, 0x86, 0x39, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb5, 0xdb, 0xef, 0x17, 0x8d, 0xd0, 0xc9, 0xb9, 0x9c, 0xf2, 0xcf, 0x6d, 0xfd, 0xea, 0x87, 0xd6, 0x9d, 0x45, 0xad, 0x76, 0x30, 0x00, 0x00, 0x00, 0x14, 0x7a, 0xab, 0x89, 0xc1, 0xdc, 0xe0, 0xf0, 0xf5, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdb, 0xed, 0xf4, 0xdd, 0xef, 0xf5, 0xe0, 0xf2, 0xfc, 0x8f, 0xc6, 0xe3, 0xd6, 0xa4, 0x4a, 0xff, 0xf4, 0x95, 0xd7, 0x9d, 0x46, 0x96, 0x66, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x43, 0x61, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb5, 0x0c, 0x7d, 0xb7, 0x05, 0x7e, 0xbe, 0x6d, 0x85, 0x75, 0xdc, 0x9a, 0x39, 0xd5, 0x99, 0x3f, 0x50, 0x34, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 0x8c, 0x20, 0xcd, 0x8a, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* insertScriptAlpha = new uint8_t[256] { 0x00, 0x00, 0x00, 0x00, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x23, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc6, 0x33, 0x33, 0x00, 0x00, 0x34, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7d, 0x00, 0x00, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x12, 0x00, 0x00, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x69, 0x00, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x23, 0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7a, 0x1a, 0x00, 0x44, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x49, 0x12, 0x00, 0x00, 0x07, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xff, 0xee, 0x33, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00 };

	uint8_t* testCodeRgb = new uint8_t[768]{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7e, 0xb5, 0x3b, 0x97, 0xc4, 0x49, 0x9d, 0xc7, 0x38, 0x95, 0xc3, 0x04, 0x79, 0xb3, 0x07, 0x7a, 0xb4, 0x07, 0x7a, 0xb4, 0x08, 0x7a, 0xb4, 0x0a, 0x7c, 0xb5, 0x0f, 0x7f, 0xb6, 0x14, 0x81, 0xb8, 0x1d, 0x83, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 0xb6, 0xa7, 0xcf, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xba, 0xda, 0xe9, 0xc9, 0xe2, 0xee, 0x14, 0x7e, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x7a, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xfe, 0xfb, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x99, 0xc6, 0xc2, 0xdf, 0xec, 0x34, 0x92, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x9e, 0xc8, 0xff, 0xff, 0xff, 0xf3, 0xf9, 0xfc, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf1, 0xf8, 0xfb, 0xf2, 0xf8, 0xfb, 0xf5, 0xfa, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x77, 0xb2, 0x1c, 0x85, 0xba, 0x22, 0x89, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7f, 0xbf, 0x56, 0xa5, 0xcc, 0xff, 0xff, 0xff, 0xeb, 0xf6, 0xf9, 0xea, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xeb, 0xf5, 0xf9, 0xf5, 0xfa, 0xfc, 0xfd, 0xfe, 0xfe, 0x08, 0x74, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7a, 0xb0, 0x88, 0xbf, 0xdb, 0xff, 0xff, 0xff, 0xe5, 0xf1, 0xf7, 0xe4, 0xf2, 0xf8, 0xe4, 0xf3, 0xf9, 0xe4, 0xf3, 0xf9, 0xe4, 0xf2, 0xf8, 0xe4, 0xf2, 0xf8, 0xf6, 0xfc, 0xff, 0xc8, 0xe4, 0xf0, 0x0b, 0x74, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x79, 0xac, 0xbb, 0xdb, 0xea, 0xee, 0xf7, 0xfa, 0xdd, 0xf0, 0xf7, 0xdd, 0xf4, 0xfb, 0xdd, 0xfb, 0xff, 0xdd, 0xfa, 0xff, 0xdd, 0xf4, 0xfb, 0xdd, 0xf4, 0xfb, 0xf9, 0xff, 0xff, 0x9e, 0xd9, 0xef, 0x0a, 0x74, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x76, 0xa9, 0xcc, 0xe4, 0xf0, 0xe0, 0xf0, 0xf7, 0xd5, 0xf0, 0xf9, 0xd4, 0xfc, 0xff, 0xd1, 0x18, 0x17, 0xd2, 0x17, 0x16, 0xd6, 0xf9, 0xff, 0xd6, 0xf9, 0xff, 0xd5, 0x18, 0x17, 0xe1, 0x21, 0x1d, 0x00, 0x74, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x79, 0xb0, 0xff, 0xff, 0xff, 0xcf, 0xef, 0xf8, 0xcc, 0xf9, 0xff, 0xd0, 0x19, 0x1b, 0xff, 0xcd, 0xb9, 0xd3, 0x1f, 0x1f, 0xcf, 0xfa, 0xff, 0xce, 0xf9, 0xff, 0xd3, 0x1f, 0x1f, 0xff, 0xd1, 0xbc, 0xde, 0x2a, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x84, 0xb8, 0xff, 0xff, 0xff, 0xc8, 0xf6, 0xff, 0xd0, 0x1a, 0x1c, 0xff, 0xb2, 0x9b, 0xff, 0x64, 0x39, 0xda, 0x20, 0x1e, 0xce, 0xf5, 0xff, 0xc9, 0xf3, 0xfe, 0xd2, 0x1b, 0x1c, 0xff, 0x63, 0x39, 0xff, 0xb8, 0xa1, 0xd2, 0x30, 0x32, 0x00, 0x00, 0x00, 0x19, 0x84, 0xb9, 0x0e, 0x7e, 0xb6, 0x0e, 0x81, 0xb8, 0x27, 0x99, 0xcc, 0xd8, 0x1c, 0x1b, 0xff, 0x9a, 0x7f, 0xff, 0x6d, 0x48, 0xd6, 0x28, 0x2a, 0x24, 0xa5, 0xd9, 0x7b, 0xc2, 0xe0, 0xcf, 0xef, 0xf8, 0xea, 0xff, 0xff, 0xce, 0x24, 0x28, 0xfe, 0x6e, 0x49, 0xff, 0xa2, 0x88, 0xd1, 0x35, 0x37, 0x12, 0x80, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x1c, 0x1b, 0xff, 0x86, 0x67, 0xff, 0x77, 0x54, 0xd4, 0x28, 0x2a, 0xb0, 0xef, 0xff, 0x1b, 0x8e, 0xc3, 0xd6, 0xf3, 0xfb, 0xc8, 0xfc, 0xff, 0xce, 0x25, 0x28, 0xff, 0x78, 0x56, 0xff, 0x8e, 0x6f, 0xd1, 0x36, 0x38, 0x14, 0x7a, 0xab, 0x89, 0xc1, 0xdc, 0xe0, 0xf1, 0xf7, 0xdb, 0xf4, 0xfb, 0xd8, 0xff, 0xff, 0xdd, 0x25, 0x23, 0xff, 0x81, 0x5e, 0xff, 0x80, 0x5e, 0xdf, 0x23, 0x21, 0x92, 0xd5, 0xee, 0xdd, 0xfd, 0xff, 0xd9, 0x20, 0x1f, 0xff, 0x80, 0x5e, 0xff, 0x84, 0x63, 0xcf, 0x33, 0x36, 0x00, 0x00, 0x00, 0x0f, 0x43, 0x61, 0x14, 0x81, 0xb8, 0x0f, 0x7e, 0xb6, 0x0d, 0x7f, 0xb7, 0x0a, 0x84, 0xbd, 0x00, 0x8e, 0xcc, 0xdd, 0x2d, 0x2c, 0xff, 0x8e, 0x6c, 0xe1, 0x2c, 0x29, 0x00, 0x8a, 0xc7, 0x00, 0x89, 0xc6, 0xe0, 0x2b, 0x28, 0xff, 0x8f, 0x6e, 0xcf, 0x34, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x35, 0x35, 0xe5, 0x31, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x31, 0x2c, 0xd5, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t* testCodeAlpha = new uint8_t[256]{ 0x00, 0x00, 0x00, 0x00, 0xea, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x23, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x33, 0x33, 0x00, 0x00, 0x34, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb2, 0x00, 0x00, 0x00, 0x00, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x90, 0x00, 0x00, 0x00, 0x00, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 0x44, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 0x00, 0x07, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xff, 0xff, 0x33, 0x33, 0xff, 0xff, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0x00, 0x00, 0x33, 0x33, 0x00, 0x00, 0x00 };				

	this->CreateToolBar(wxTB_DEFAULT_STYLE, wxID_ANY);
	this->GetToolBar()->SetMargins(2, 2);

	m_pToolBar = this->GetToolBar();
	m_pToolBar->AddTool(ID_SCRIPT_NAV_PREV, "Previous script", wxImage(16, 16, prevScriptRgb, prevScriptAlpha, false), "Previous script");
	m_pToolBar->AddTool(ID_SCRIPT_NAV_PROX, "Following script", wxImage(16, 16, proxScriptRgb, proxScriptAlpha, false), "Following script");
	m_pToolBar->AddTool(ID_SCRIPT_NAV_GO, "Got to script", wxImage(16, 16, goScriptRgb, goScriptAlpha, false), "Go to script");
	m_pToolBar->AddTool(ID_SCRIPT_NAV_SAVE, "Save the script", wxImage(16, 16, saveScriptRgb, saveScriptAlpha, false), "Save the script");
	m_pToolBar->AddTool(ID_SCRIPT_NAV_INSERT, "Insert script", wxImage(16, 16, insertScriptRgb, insertScriptAlpha, false), "Insert script");
	m_pToolBar->AddTool(ID_SCRIPT_NAV_CODE, "Test all script code", wxImage(16, 16, testCodeRgb, testCodeAlpha, false), "Test all script code");	

	m_pToolBar->Realize();
	
	m_pToolBar->Bind(wxEVT_TOOL, &cScriptEditor::OnPrevScriptClick, this, ID_SCRIPT_NAV_PREV);
	m_pToolBar->Bind(wxEVT_TOOL, &cScriptEditor::OnProxScriptClick, this, ID_SCRIPT_NAV_PROX);
	m_pToolBar->Bind(wxEVT_TOOL, &cScriptEditor::OnGoScriptClick, this, ID_SCRIPT_NAV_GO);
	m_pToolBar->Bind(wxEVT_TOOL, &cScriptEditor::OnSaveScriptClick, this, ID_SCRIPT_NAV_SAVE);
	m_pToolBar->Bind(wxEVT_TOOL, &cScriptEditor::OnInsertScriptClick, this, ID_SCRIPT_NAV_INSERT);
	m_pToolBar->Bind(wxEVT_TOOL, &cScriptEditor::OnCheckAllCode, this, ID_SCRIPT_NAV_CODE);
}

void cScriptEditor::ScriptTextRange(size_t from, size_t to, size_t script)
{
	//std::vector<size_t> badScripts;
	//std::vector<size_t> noInsertedScripts;

	//std::string formatOriginal = ScriptEditor::PathFormat(romOriginal);
	//std::string formatTranslated = ScriptEditor::PathFormat(romTranslated);

	//Script originalText;
	//originalText.SetData(File::ReadAllBytes(ScriptEditor::FormatPath(script, formatOriginal)));

	//if (!originalText.HaveText())
	//{
	//	wxMessageBox("The script to get the text from have no text.", "Huh?");
	//	return;
	//}

	//Script translatedText;
	//translatedText.SetData(File::ReadAllBytes(ScriptEditor::FormatPath(script, formatTranslated)));

	//romTranslated.BackupRom("Text range " + std::to_string(from) + " - " + std::to_string(to));

	//for (size_t C = from; C < to; C++)
	//{
	//	Script original; 
	//	original.SetData(File::ReadAllBytes(ScriptEditor::FormatPath(C, formatOriginal)));

	//	if (!original.HaveText())
	//		continue;

	//	if (original != originalText)
	//	{
	//		badScripts.push_back(C);
	//		continue;
	//	}

	//	original.UpdateText(translatedText.GetText());
	//	File::WriteAllBytes(ScriptEditor::FormatPath(C, formatTranslated), original.GetData(), original.GetRiffLenght());

	//	if (romTranslated.InsertScript(C, original) == -1)
	//		noInsertedScripts.push_back(C);
	//}

	//if (noInsertedScripts.size() == 0 && badScripts.size() == 0)
	//{
	//	wxMessageBox("All text inserted and changed.", "Done!");
	//	return;
	//}

	//wxString result = "Scripts not inserteds: \n";

	//for (size_t C = 0; C < noInsertedScripts.size(); C++)
	//	result << "Script " << std::to_string(noInsertedScripts[C]) << "\n";

	//result << "\nScripts not changeds: \n";

	//for (size_t C = 0; C < badScripts.size(); C++)
	//	result << "Script " << std::to_string(badScripts[C]) << "\n";

	//wxMessageDialog dlg(this, result + "\n Yes to copy to clipboard", "Done!", wxYES_NO | wxSTAY_ON_TOP | wxCENTRE_ON_SCREEN | wxICON_EXCLAMATION);

	//if (dlg.ShowModal() == wxID_YES)
	//{
	//	if (wxTheClipboard->Open())
	//	{
	//		wxTheClipboard->SetData(new wxTextDataObject(result));
	//		wxTheClipboard->Close();
	//	}
	//	else
	//	{
	//		wxMessageDialog(this, "Error while copying to clipboard!", "Error!", wxOK_DEFAULT | wxICON_ERROR).ShowModal();
	//	}
	//}
}

DialogTextRange::DialogTextRange(cScriptEditor* parent) : wxDialog(nullptr, wxID_ANY, "Select range"), m_pParent(parent)
{
	CreateGUIControls();
}

void DialogTextRange::CreateGUIControls()
{
	this->SetFont(Studio::GetDefaultFont());
	this->SetForegroundColour(Studio::GetFontColour());	
	this->SetBackgroundColour(Studio::GetFrameColour());

	wxStaticText* dialogLabelFrom = new wxStaticText(this, wxID_ANY, "From:  ");
	dialogInputFrom = new wxTextCtrl(this, wxID_ANY);

	wxBoxSizer* dialogFromSizer = new wxBoxSizer(wxHORIZONTAL);
	dialogFromSizer->AddSpacer(4);
	dialogFromSizer->Add(dialogLabelFrom, 0, wxEXPAND, 0);
	dialogFromSizer->AddSpacer(4);
	dialogFromSizer->Add(dialogInputFrom, 0, wxEXPAND, 0);

	wxStaticText* dialogLabelTo = new wxStaticText(this, wxID_ANY, "To: ");
	dialogInputTo = new wxTextCtrl(this, wxID_ANY);

	wxBoxSizer* dialogToSizer = new wxBoxSizer(wxHORIZONTAL);
	dialogFromSizer->AddSpacer(4);
	dialogFromSizer->Add(dialogLabelTo, 0, wxEXPAND, 0);
	dialogFromSizer->AddSpacer(4);
	dialogFromSizer->Add(dialogInputTo, 0, wxEXPAND, 0);
	
	wxStaticText* dialogLabelScript = new wxStaticText(this, wxID_ANY, "Script:");
	dialogInputScript = new wxTextCtrl(this, wxID_ANY);
	dialogGoButton = new wxButton(this, wxID_ANY, "Go!");
	dialogGoButton->Bind(wxEVT_BUTTON, &DialogTextRange::OnGoButton, this);
	
	wxBoxSizer*   dialogScriptSizer = new wxBoxSizer(wxHORIZONTAL);
	dialogScriptSizer->AddSpacer(4);
	dialogScriptSizer->Add(dialogLabelScript, 0, wxEXPAND, 0);
	dialogScriptSizer->AddSpacer(4);
	dialogScriptSizer->Add(dialogInputScript, 0, wxEXPAND, 0);
	dialogScriptSizer->AddStretchSpacer(1);
	dialogScriptSizer->Add(dialogGoButton, 0, wxEXPAND, 0);

	wxBoxSizer* dialogRootSizer = new wxBoxSizer(wxVERTICAL);
	dialogRootSizer->AddSpacer(4);
	dialogRootSizer->Add(dialogFromSizer, 0, wxEXPAND, 0);
	dialogRootSizer->AddSpacer(4);
	dialogRootSizer->Add(dialogToSizer, 0, wxEXPAND, 0);
	dialogRootSizer->AddSpacer(4);
	dialogRootSizer->Add(dialogScriptSizer, 0, wxEXPAND, 0);	

	this->SetSizer(dialogRootSizer);
	dialogRootSizer->SetSizeHints(this);
	dialogRootSizer->Fit(this);	
}

void DialogTextRange::OnGoButton(wxCommandEvent& event)
{
	if(dialogInputFrom->GetLineLength(0) == 0)
	{
		wxMessageBox("We need a number to start from...", "Huh?");
		event.Skip();
		return;
	}
	
	if(dialogInputTo->GetLineLength(0) == 0)
	{
		wxMessageBox("We need a number to end from...", "Huh?");
		event.Skip();
		return;
	}
	
	if(dialogInputScript->GetLineLength(0) == 0)
	{
		wxMessageBox("We need a script to get the text from...", "Huh?");
		event.Skip();
		return;
	}
	
	size_t from = std::stoi(dialogInputFrom->GetValue().ToStdString());
	size_t to  = std::stoi(dialogInputTo->GetValue().ToStdString());
	size_t script = std::stoi(dialogInputScript->GetValue().ToStdString());
		
	m_pParent->ScriptTextRange(from, to, script);
	
	this->EndModal(wxID_OK);
	event.Skip();
}